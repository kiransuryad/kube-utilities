
aws sns list-topics --output text | awk '{print $1}' | while read -r topicArn; do aws sns get-topic-attributes --topic-arn $topicArn | jq -r '.Attributes.TopicName,.Attributes.Tags'; done


---
# 8. Route 53 Hosted Zones (Global Service)
if [ "$region" == "us-east-1" ]; then
    section_header "Route 53 Hosted Zones (Global)"
    
    # List all hosted zones
    hosted_zones=$(aws route53 list-hosted-zones --query 'HostedZones[*].Id' --output text)
    
    if [ -n "$hosted_zones" ]; then
        for zone in $hosted_zones; do
            # Get basic zone info
            aws route53 get-hosted-zone --id $zone --query '{
                Name: HostedZone.Name,
                Id: HostedZone.Id,
                RecordCount: HostedZone.ResourceRecordSetCount,
                Private: HostedZone.Config.PrivateZone || `false`,
                Comment: HostedZone.Config.Comment || `No comment`
            }' --output table
            
            # List record sets (first 5)
            echo "  Record Sets (First 5):"
            aws route53 list-resource-record-sets --hosted-zone-id $zone --max-items 5 --query 'ResourceRecordSets[*].{
                Name: Name,
                Type: Type,
                TTL: TTL || `N/A (Alias)`,
                Records: (ResourceRecords[*].Value) || join(`, `, AliasTarget.[DNSName, HostedZoneId])
            }' --output table
            
            # List associated VPCs if it's a private zone
            is_private=$(aws route53 get-hosted-zone --id $zone --query 'HostedZone.Config.PrivateZone' --output text)
            if [ "$is_private" == "true" ]; then
                echo "  Associated VPCs:"
                aws route53 get-hosted-zone --id $zone --query 'VPCs[*].{VPC:VPCId, Region:VPCRegion}' --output table
            fi
            
            echo ""  # Add a blank line for readability between zones
        done
    else
        echo "No hosted zones found."
    fi
fi


--
# 15. VPC Endpoint Services (AWS PrivateLink)
section_header "VPC Endpoint Services (AWS PrivateLink)"

for region in "${regions[@]}"; do
    echo -e "\nRegion: $region"

    # List all VPC Endpoint Services
    service_ids=$(aws ec2 describe-vpc-endpoint-service-configurations --region $region --query 'ServiceConfigurations[*].ServiceId' --output text)

    if [ -n "$service_ids" ]; then
        for service_id in $service_ids; do
            # Get service details
            aws ec2 describe-vpc-endpoint-service-configurations --service-ids $service_id --region $region --query 'ServiceConfigurations[0].{
                Name: ServiceName,
                Type: ServiceType,
                State: ServiceState,
                AvailabilityZones: AvailabilityZones[],
                AcceptanceRequired: AcceptanceRequired,
                AllowedPrincipals: join(`, `, AllowedPrincipals[] || [`Any Principal`]),
                TargetServices: (ServiceProductName || `Self-Managed`) + ` (` + join(`, `, ServiceNames) + `)`
            }' --output table

            # Get service permissions
            echo "  Service Permissions:"
            aws ec2 describe-vpc-endpoint-service-permissions --service-id $service_id --region $region --query 'AllowedPrincipals[]' --output table

            # List consumers (first 5)
            echo "  Service Consumers (First 5):"
            aws ec2 describe-vpc-endpoint-connections --filters Name=service-id,Values=$service_id --region $region --max-results 5 --query 'VpcEndpointConnections[*].{
                EndpointID: VpcEndpointId,
                OwnerID: VpcEndpointOwner,
                State: State.Name
            }' --output table

            echo ""  # Add a blank line for readability between services
        done
    else
        echo "No VPC Endpoint Services found."
    fi
done
--


# 9. Athena
section_header "Athena Named Queries"
named_query_ids=$(aws athena list-named-queries --region $region --query 'NamedQueryIds[]' --output text)

if [ -n "$named_query_ids" ]; then
    echo "Named Queries:"
    for query_id in $named_query_ids; do
        aws athena get-named-query --named-query-id $query_id --region $region --query '{
            Name: Name,
            ID: NamedQueryId,
            Database: Database,
            Description: Description,
            QueryString: substr(QueryString, 1, 50)
        }' --output table
    done
else
    echo "No named queries found."
fi

section_header "Athena Query Executions (Last 5)"
aws athena list-query-executions --region $region --max-results 5 --query 'QueryExecutions[*].{
    ID: QueryExecutionId,
    Database: Database,
    State: Status.State,
    SubmittedAt: SubmissionDateTime,
    QueryString: substr(Query, 1, 50)
}' --output table



---
#!/bin/bash

# List of regions
regions=("eu-west-2" "eu-west-1" "us-east-1")

# Function to display section header
section_header() {
    echo -e "\n====== $1 ======"
}

# Loop through each region
for region in "${regions[@]}"; do
    echo -e "\n\n=========== Region: $region ===========\n"

    # 1. EC2 Instances
    section_header "EC2 Instances"
    aws ec2 describe-instances --region $region --query 'Reservations[*].Instances[*].[InstanceId, State.Name, InstanceType, Tags[?Key==`Name`].Value | [0]]' --output table

    # 2. API Gateway
    section_header "API Gateways"
    aws apigateway get-rest-apis --region $region

    # 3. EKS Clusters
    section_header "EKS Clusters"
    aws eks list-clusters --region $region

    # 4. SQS Queues
    section_header "SQS Queues"
    aws sqs list-queues --region $region

    # 5. SNS Topics
    section_header "SNS Topics"
    aws sns list-topics --region $region

    # 6. EBS Volumes
    section_header "EBS Volumes"
    aws ec2 describe-volumes --region $region --query 'Volumes[*].[VolumeId, Size, State, VolumeType]' --output table

    # 7. EBS Snapshots
    section_header "EBS Snapshots"
    aws ec2 describe-snapshots --owner-ids self --region $region --query 'Snapshots[*].[SnapshotId, VolumeSize, State, StartTime]' --output table

    # 8. Route 53 Hosted Zones (Note: Route 53 is a global service, not region-specific)
    if [ "$region" == "us-east-1" ]; then
        section_header "Route 53 Hosted Zones (Global)"
        aws route53 list-hosted-zones --query 'HostedZones[*].[Name, Id, Config.PrivateZone]' --output table
    fi

    # 9. Athena Queries
    section_header "Athena Queries"
    aws athena list-queries --region $region --query 'QueryExecutions[*].[QueryExecutionId, QueryString, State.State]' --output table

    # 10. Glue Jobs
    section_header "Glue Jobs"
    aws glue get-jobs --region $region --query 'Jobs[*].[Name, Command.Name, State]' --output table

    # 11. Secrets
    section_header "Secrets"
    aws secretsmanager list-secrets --region $region --query 'SecretList[*].[Name, ARN]' --output table

    # 12. KMS Keys
    section_header "KMS Keys"
    aws kms list-keys --region $region --query 'Keys[*].[KeyId, KeyArn]' --output table

    # 13. Load Balancers
    section_header "Load Balancers"
    aws elbv2 describe-load-balancers --region $region --query 'LoadBalancers[*].[LoadBalancerName, Type, Scheme, State.Code]' --output table

    # 14. RDS Instances
    section_header "RDS Instances"
    aws rds describe-db-instances --region $region --query 'DBInstances[*].[DBInstanceIdentifier, Engine, InstanceClass, DBInstanceStatus]' --output table
done
