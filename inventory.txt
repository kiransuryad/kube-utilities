
aws kms list-keys --region $region --query '
  let aliases = list_aliases().Aliases;
  Keys[*].{
    "KeyId": KeyId,
    "KeyArn": KeyArn,
    "Alias": aliases[?TargetKeyId==KeyId]|[0].AliasName || `"-"`,
    "Description": describe_key(KeyId).KeyMetadata.Description || `"-"`,
    "CreationDate": describe_key(KeyId).KeyMetadata.CreationDate || `"-"`
  }
' --output table


---
aws kms list-keys --region $region --query '
  let keys = Keys[*].[KeyId, KeyArn];
  let aliases = from_entries(
    [].create_set(
      list_aliases(Keys[].KeyId)[*].Aliases[*].[AliasName, TargetKeyId]
    )[*].[1,0]
  );
  let descriptions = from_entries(
    [].create_set(
      describe_key(Keys[].KeyId)[*].[KeyMetadata.KeyId, KeyMetadata.Description]
    )
  );
  let creation_dates = from_entries(
    [].create_set(
      describe_key(Keys[].KeyId)[*].[KeyMetadata.KeyId, to_string(KeyMetadata.CreationDate)]
    )
  );
  keys[*].{
    "KeyId": [0],
    "KeyArn": [1],
    "Alias": [0] | map(@) | map(aliases[*] | [?@] | [0][0] || `"-"`)[0],
    "Description": [0] | map(@) | map(descriptions[*] | [?@] | [0][0] || `"-"`)[0],
    "CreationDate": [0] | map(@) | map(creation_dates[*] | [?@] | [0][0] || `"-"`)[0]
  }' --output table



---
aws kms list-keys --region $region --query 'Keys[*].[KeyId, KeyArn]' --output json | jq -r '.[] | "\(.[])"' | while read -r key_id key_arn; do alias=$(aws kms list-aliases --key-id $key_id --region $region --output json | jq -r '.Aliases[0].AliasName'); description=$(aws kms describe-key --key-id $key_id --region $region --query 'KeyMetadata.Description' --output text); creation_date=$(aws kms describe-key --key-id $key_id --region $region --query 'KeyMetadata.CreationDate' --output text); echo -e "$key_id\t$key_arn\t$alias\t$description\t$creation_date"; done | column -t -s $'\t'


aws kms list-keys --region $region --query 'Keys[*].[KeyId, KeyArn]' --output table | while read -r key_id key_arn; do alias=$(aws kms list-aliases --key-id "$key_id" --region $region --query 'Aliases[0].AliasName' --output text); description=$(aws kms describe-key --key-id "$key_id" --region $region --query 'KeyMetadata.Description' --output text); creation_date=$(aws kms describe-key --key-id "$key_id" --region $region --query 'KeyMetadata.CreationDate' --output text); echo -e "$key_id\t$key_arn\t$alias\t$description\t$creation_date"; done | column -t -s $'\t' -N "KeyId,KeyArn,Alias,Description,CreationDate"


--
aws kms list-keys --region $region --query 'Keys[*].[KeyId, KeyArn]' --output table \
| while read -r key_id key_arn; do
    alias=$(aws kms list-aliases --key-id "$key_id" --region $region --query 'Aliases[0].AliasName' --output text)
    description=$(aws kms describe-key --key-id "$key_id" --region $region --query 'KeyMetadata.Description' --output text)
    creation_date=$(aws kms describe-key --key-id "$key_id" --region $region --query 'KeyMetadata.CreationDate' --output text)
    echo -e "$key_id\t$key_arn\t$alias\t$description\t$creation_date"
done | column -t -s $'\t' -N "KeyId,KeyArn,Alias,Description,CreationDate"

--
aws kms list-keys --region $region --query 'Keys[*].[KeyId, KeyArn, AliasArn:DescribeKey[?TargetKeyId == KeyId].AliasName, Description, CreationDate]' --output table


--
section_header "Athena Query Executions (Last 5)"
query_executions=$(aws athena list-query-executions --region $region --max-results 5 --query 'length(QueryExecutions)' --output text)

if [ "$query_executions" -gt 0 ]; then
  aws athena list-query-executions --region $region --max-results 5 --query 'QueryExecutions[*].{ ID: QueryExecutionId, Database: Database, State: Status.State, SubmittedAt: SubmissionDateTime, QueryString: substr(Query, 1, 50) }' --output table
else
  echo "No query executions found."
fi

---
# 6. EBS Volumes
section_header "EBS Volumes"

aws ec2 describe-volumes --region $region --query '
  Volumes[*].{
    "VolumeId": VolumeId,
    "Size (GiB)": Size,
    "Type": VolumeType,
    "State": State,
    "Encrypted": Encrypted,
    "IOPS": Iops,
    "Throughput (MiB/s)": Throughput,
    "Created": to_string(CreateTime)[0:10],
    "AZ": AvailabilityZone,
    "Instance": Attachments[0].{
      "InstanceId": InstanceId,
      "Device": Device,
      "State": State
    } || `Not Attached`,
    "Name Tag": Tags[?Key==`Name`] | [0].Value || `No Name Tag`,
    "Snapshot": SnapshotId || `None`
  }
' --output table

---
# 5. SNS Topics
section_header "SNS Topics"

for region in "${regions[@]}"; do
    echo -e "\nRegion: $region"

    # Create a JMESPath query to build our table
    jq_query='
    {
      "TableData": Topics[].{
        "TopicName": (TopicArn | split(":") | [5] | [0]),
        "PrimaryRegion": (TopicArn | split(":") | [3] | [0]),
        "TopicArn": TopicArn
      }
    }'

    # List all SNS topics and transform the output
    topics=$(aws sns list-topics --region $region --query "$jq_query" --output json)

    if [ "$(echo $topics | jq '.TableData | length')" -gt 0 ]; then
        # Initialize an empty array for rows
        rows="[]"

        # Iterate through each topic and add tags
        while read -r topic; do
            topic_arn=$(echo $topic | jq -r '.TopicArn')
            tags=$(aws sns list-tags-for-resource --resource-arn "$topic_arn" --region $region --query 'Tags[*].{Key:Key,Value:Value}' --output json)
            
            # Format tags as "key1=value1, key2=value2" or "No Tags"
            if [ "$tags" != "[]" ]; then
                formatted_tags=$(echo $tags | jq -r 'map("\(.Key)=\(.Value)") | join(", ")')
            else
                formatted_tags="No Tags"
            fi
            
            # Add formatted tags to the topic and append to rows
            topic_with_tags=$(echo $topic | jq --argjson tags "\"$formatted_tags\"" '. + {Tags: $tags}')
            rows=$(echo $rows $topic_with_tags | jq -s '.[0] + [.[1]]')
        done < <(echo "$topics" | jq -c '.TableData[]')

        # Output the final table
        echo "$rows" | jq -r '["Topic Name","Primary Region","Tags"], ["---","---","---"], (.[] | [.TopicName, .PrimaryRegion, .Tags]) | @tsv' | column -t -s $'\t'
    else
        echo "No SNS topics found."
    fi
done

---
# 5. SNS Topics
section_header "SNS Topics"

for region in "${regions[@]}"; do
    echo -e "\nRegion: $region"

    # List all SNS topics
    topic_arns=$(aws sns list-topics --region $region --query 'Topics[*].TopicArn' --output text)

    if [ -n "$topic_arns" ]; then
        # Initialize an empty table
        printf "%-36s %-30s %s\n" "Topic Name" "Primary Region" "Tags"
        printf "%s %s %s\n" "$(printf '%0.s-' {1..36})" "$(printf '%0.s-' {1..30})" "$(printf '%0.s-' {1..50})"

        for arn in $topic_arns; do
            # Extract topic name and primary region from ARN
            topic_name=$(echo $arn | awk -F: '{print $NF}')
            primary_region=$(echo $arn | awk -F: '{print $4}')
            
            # Get tags for the topic
            tags=$(aws sns list-tags-for-resource --resource-arn $arn --region $region --query 'Tags[*].{Key:Key,Value:Value}' --output json)
            
            # Format tags as "key1=value1, key2=value2"
            if [ "$tags" != "[]" ]; then
                formatted_tags=$(echo $tags | jq -r 'map("\(.Key)=\(.Value)") | join(", ")')
            else
                formatted_tags="No Tags"
            fi
            
            # Print the table row
            printf "%-36s %-30s %s\n" "$topic_name" "$primary_region" "$formatted_tags"
        done
    else
        echo "No SNS topics found."
    fi
done


---
aws sns list-topics --output text | awk '{print $1}' | while read -r topicArn; do aws sns get-topic-attributes --topic-arn $topicArn | jq -r '.Attributes.TopicName,.Attributes.Tags'; done


---
# 8. Route 53 Hosted Zones (Global Service)
if [ "$region" == "us-east-1" ]; then
    section_header "Route 53 Hosted Zones (Global)"
    
    # List all hosted zones
    hosted_zones=$(aws route53 list-hosted-zones --query 'HostedZones[*].Id' --output text)
    
    if [ -n "$hosted_zones" ]; then
        for zone in $hosted_zones; do
            # Get basic zone info
            aws route53 get-hosted-zone --id $zone --query '{
                Name: HostedZone.Name,
                Id: HostedZone.Id,
                RecordCount: HostedZone.ResourceRecordSetCount,
                Private: HostedZone.Config.PrivateZone || `false`,
                Comment: HostedZone.Config.Comment || `No comment`
            }' --output table
            
            # List record sets (first 5)
            echo "  Record Sets (First 5):"
            aws route53 list-resource-record-sets --hosted-zone-id $zone --max-items 5 --query 'ResourceRecordSets[*].{
                Name: Name,
                Type: Type,
                TTL: TTL || `N/A (Alias)`,
                Records: (ResourceRecords[*].Value) || join(`, `, AliasTarget.[DNSName, HostedZoneId])
            }' --output table
            
            # List associated VPCs if it's a private zone
            is_private=$(aws route53 get-hosted-zone --id $zone --query 'HostedZone.Config.PrivateZone' --output text)
            if [ "$is_private" == "true" ]; then
                echo "  Associated VPCs:"
                aws route53 get-hosted-zone --id $zone --query 'VPCs[*].{VPC:VPCId, Region:VPCRegion}' --output table
            fi
            
            echo ""  # Add a blank line for readability between zones
        done
    else
        echo "No hosted zones found."
    fi
fi


--
# 15. VPC Endpoint Services (AWS PrivateLink)
section_header "VPC Endpoint Services (AWS PrivateLink)"

for region in "${regions[@]}"; do
    echo -e "\nRegion: $region"

    # List all VPC Endpoint Services
    service_ids=$(aws ec2 describe-vpc-endpoint-service-configurations --region $region --query 'ServiceConfigurations[*].ServiceId' --output text)

    if [ -n "$service_ids" ]; then
        for service_id in $service_ids; do
            # Get service details
            aws ec2 describe-vpc-endpoint-service-configurations --service-ids $service_id --region $region --query 'ServiceConfigurations[0].{
                Name: ServiceName,
                Type: ServiceType,
                State: ServiceState,
                AvailabilityZones: AvailabilityZones[],
                AcceptanceRequired: AcceptanceRequired,
                AllowedPrincipals: join(`, `, AllowedPrincipals[] || [`Any Principal`]),
                TargetServices: (ServiceProductName || `Self-Managed`) + ` (` + join(`, `, ServiceNames) + `)`
            }' --output table

            # Get service permissions
            echo "  Service Permissions:"
            aws ec2 describe-vpc-endpoint-service-permissions --service-id $service_id --region $region --query 'AllowedPrincipals[]' --output table

            # List consumers (first 5)
            echo "  Service Consumers (First 5):"
            aws ec2 describe-vpc-endpoint-connections --filters Name=service-id,Values=$service_id --region $region --max-results 5 --query 'VpcEndpointConnections[*].{
                EndpointID: VpcEndpointId,
                OwnerID: VpcEndpointOwner,
                State: State.Name
            }' --output table

            echo ""  # Add a blank line for readability between services
        done
    else
        echo "No VPC Endpoint Services found."
    fi
done
--


# 9. Athena
section_header "Athena Named Queries"
named_query_ids=$(aws athena list-named-queries --region $region --query 'NamedQueryIds[]' --output text)

if [ -n "$named_query_ids" ]; then
    echo "Named Queries:"
    for query_id in $named_query_ids; do
        aws athena get-named-query --named-query-id $query_id --region $region --query '{
            Name: Name,
            ID: NamedQueryId,
            Database: Database,
            Description: Description,
            QueryString: substr(QueryString, 1, 50)
        }' --output table
    done
else
    echo "No named queries found."
fi

section_header "Athena Query Executions (Last 5)"
aws athena list-query-executions --region $region --max-results 5 --query 'QueryExecutions[*].{
    ID: QueryExecutionId,
    Database: Database,
    State: Status.State,
    SubmittedAt: SubmissionDateTime,
    QueryString: substr(Query, 1, 50)
}' --output table



---
#!/bin/bash

# List of regions
regions=("eu-west-2" "eu-west-1" "us-east-1")

# Function to display section header
section_header() {
    echo -e "\n====== $1 ======"
}

# Loop through each region
for region in "${regions[@]}"; do
    echo -e "\n\n=========== Region: $region ===========\n"

    # 1. EC2 Instances
    section_header "EC2 Instances"
    aws ec2 describe-instances --region $region --query 'Reservations[*].Instances[*].[InstanceId, State.Name, InstanceType, Tags[?Key==`Name`].Value | [0]]' --output table

    # 2. API Gateway
    section_header "API Gateways"
    aws apigateway get-rest-apis --region $region

    # 3. EKS Clusters
    section_header "EKS Clusters"
    aws eks list-clusters --region $region

    # 4. SQS Queues
    section_header "SQS Queues"
    aws sqs list-queues --region $region

    # 5. SNS Topics
    section_header "SNS Topics"
    aws sns list-topics --region $region

    # 6. EBS Volumes
    section_header "EBS Volumes"
    aws ec2 describe-volumes --region $region --query 'Volumes[*].[VolumeId, Size, State, VolumeType]' --output table

    # 7. EBS Snapshots
    section_header "EBS Snapshots"
    aws ec2 describe-snapshots --owner-ids self --region $region --query 'Snapshots[*].[SnapshotId, VolumeSize, State, StartTime]' --output table

    # 8. Route 53 Hosted Zones (Note: Route 53 is a global service, not region-specific)
    if [ "$region" == "us-east-1" ]; then
        section_header "Route 53 Hosted Zones (Global)"
        aws route53 list-hosted-zones --query 'HostedZones[*].[Name, Id, Config.PrivateZone]' --output table
    fi

    # 9. Athena Queries
    section_header "Athena Queries"
    aws athena list-queries --region $region --query 'QueryExecutions[*].[QueryExecutionId, QueryString, State.State]' --output table

    # 10. Glue Jobs
    section_header "Glue Jobs"
    aws glue get-jobs --region $region --query 'Jobs[*].[Name, Command.Name, State]' --output table

    # 11. Secrets
    section_header "Secrets"
    aws secretsmanager list-secrets --region $region --query 'SecretList[*].[Name, ARN]' --output table

    # 12. KMS Keys
    section_header "KMS Keys"
    aws kms list-keys --region $region --query 'Keys[*].[KeyId, KeyArn]' --output table

    # 13. Load Balancers
    section_header "Load Balancers"
    aws elbv2 describe-load-balancers --region $region --query 'LoadBalancers[*].[LoadBalancerName, Type, Scheme, State.Code]' --output table

    # 14. RDS Instances
    section_header "RDS Instances"
    aws rds describe-db-instances --region $region --query 'DBInstances[*].[DBInstanceIdentifier, Engine, InstanceClass, DBInstanceStatus]' --output table
done
