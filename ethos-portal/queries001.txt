Perfect — continuing the same **Ethos-Portal LLD style** (as in your API Gateway & CloudFront docs), here’s a **Low-Level Design template for AWS Network Load Balancer (NLB)**.

This version follows your project format:

* placeholders for **AS-IS (hWP AWS Account)** details
* corresponding **TO-BE (CIO AWS Account)** design
* consistent sectioning: Executive Summary → Scope → AS-IS → TO-BE → Terraform → Migration → Validation → Risks → Appendices

You can copy it directly into Confluence or Markdown and fill in the values.

---

# 1. Executive Summary

**Objective:**
Replicate and harden the existing **AWS Network Load Balancer (NLB)** configuration from the hWP AWS Account into the CIO-managed AWS environments, ensuring parity in functionality, security, monitoring, and integrations (API Gateway, ECS/EKS, etc.).

**Key Outcomes**

* Equivalent listeners, target groups, and routing behaviour as legacy NLB.
* Integration with existing VPC, subnets, and backend services.
* Enhanced monitoring (CloudWatch, VPC Flow Logs, NLB Access Logs).
* Infrastructure-as-Code reproducibility through Terraform.

---

# 2. Scope & Assumptions

**In Scope**

* AWS Network Load Balancers (Internet-facing and Internal)
* Target Groups (EC2, ECS, IP targets)
* Listeners, listener rules, health checks
* Security groups and subnet associations
* Cross-zone load balancing
* Connection logging and CloudWatch monitoring
* Elastic IPs (if used)
* Integration with:

  * API Gateway (Private integration via VPC Link)
  * Application Load Balancer or EKS ingress services
  * ECS services or EC2 instances

**Out of Scope**

* Application logic behind targets
* DNS Route 53 records (documented separately)
* SSL/TLS termination (handled at CloudFront or ALB layer)

**Assumptions**

* Existing NLB configuration is accessible for read operations.
* Subnets and VPCs already provisioned in CIO accounts.
* Security groups and IAM roles follow CIO security baselines.

---

# 3. AS-IS (hWP AWS Account)

## 3.1 Environment Map

| Env  | Account ID  | Region     | NLB Name     | Type                         | Notes |
| ---- | ----------- | ---------- | ------------ | ---------------------------- | ----- |
| UAT  | `<acct-id>` | `<region>` | `<nlb-name>` | `<internet-facing/internal>` |       |
| PROD | `<acct-id>` | `<region>` | `<nlb-name>` | `<internet-facing/internal>` |       |

## 3.2 Basic Details

| Attribute                 | Value                                                             |
| ------------------------- | ----------------------------------------------------------------- |
| NLB ARN                   | `<arn:aws:elasticloadbalancing:region:acct:loadbalancer/net/...>` |
| DNS Name                  | `<nlb-dns-name>`                                                  |
| Scheme                    | `<internet-facing/internal>`                                      |
| VPC ID                    | `<vpc-xxxx>`                                                      |
| Subnets                   | `<subnet-a, subnet-b, subnet-c>`                                  |
| Cross-Zone Load Balancing | `<enabled/disabled>`                                              |
| Deletion Protection       | `<true/false>`                                                    |
| Access Logs               | `<enabled/disabled>` (Bucket: `<s3://bucket/prefix>`)             |
| IP Address Type           | `<ipv4/dualstack>`                                                |
| Tags                      | `<project=ethos, env=uat>`                                        |

## 3.3 Listeners

| Protocol | Port | Default Action | Target Group | TLS Policy (if any)                     |
| -------- | ---- | -------------- | ------------ | --------------------------------------- |
| TCP      | 80   | Forward        | `tg-http`    | N/A                                     |
| TLS      | 443  | Forward        | `tg-https`   | `<ELBSecurityPolicy-TLS13-1-2-2021-06>` |

## 3.4 Target Groups

| Target Group Name | Protocol | Port | Target Type | Health Check         | Dereg Delay | Stickiness | Targets                          |
| ----------------- | -------- | ---- | ----------- | -------------------- | ----------- | ---------- | -------------------------------- |
| `tg-http`         | TCP      | 80   | IP          | TCP:80, Healthy: 3/5 | 300s        | Disabled   | `<app1:10.0.1.x, app2:10.0.2.x>` |
| `tg-https`        | TLS      | 443  | Instance    | TLS:443              | 300s        | Disabled   | `<ec2-ids>`                      |

> Use `aws elbv2 describe-target-groups` and `describe-target-health` to extract details.

## 3.5 Health Check Configuration

| Target Group | Protocol | Path | Interval | Timeout | Healthy/Unhealthy Thresholds |
| ------------ | -------- | ---- | -------- | ------- | ---------------------------- |
| `tg-http`    | TCP      | N/A  | 10       | 6       | 3 / 3                        |

## 3.6 Associated Services

| Integration          | Type                                   | Notes                                        |          |
| -------------------- | -------------------------------------- | -------------------------------------------- | -------- |
| API Gateway VPC Link | Private                                | `/v1/brengine` integration                   |          |
| ECS Service          | Network Mode                           | `<bridge                                     | awsvpc>` |
| EKS Ingress          | NLB provisioned via Service annotation | `<kubernetes.io/service-type: LoadBalancer>` |          |

## 3.7 Monitoring & Logging

| Metric                                     | Namespace                       | Alarm Thresholds | Notes                  |
| ------------------------------------------ | ------------------------------- | ---------------- | ---------------------- |
| `ActiveFlowCount`                          | AWS/NLB                         | `<limit>`        | Track connection count |
| `HealthyHostCount`                         | AWS/NLB                         | `<threshold>`    | Per target group       |
| `UnHealthyHostCount`                       | AWS/NLB                         |                  |                        |
| `ProcessedBytes`, `TCP_Client_Reset_Count` |                                 |                  |                        |
| Access Logs                                | S3 bucket: `<s3://logs-bucket>` |                  | Retained 30 days       |

---

# 4. TO-BE Design (CIO AWS Account)

## 4.1 High-Level Design

```mermaid
flowchart LR
  client((Client))
  cf[CloudFront/Akamai]
  apigw[API Gateway (VPC Link)]
  nlb[NLB - CIO]
  tg1[Target Group 1 - ALB]
  svc1[EKS/ECS Services]

  client --> cf --> apigw --> nlb --> tg1 --> svc1
```

## 4.2 NLB Overview

| Attribute                 | Value                                     |
| ------------------------- | ----------------------------------------- |
| Name                      | `cio-nlb-<env>`                           |
| Type                      | `<internet-facing/internal>`              |
| Scheme                    | `<dualstack>`                             |
| Subnets                   | `<subnet-a, subnet-b, subnet-c>`          |
| Cross-Zone Load Balancing | `<enabled>`                               |
| Deletion Protection       | `<true>`                                  |
| Access Logging            | Enabled → `s3://cio-logs/cloudfront/nlb/` |
| Tags                      | `env=<env>, project=ethos-portal`         |

## 4.3 Listeners

| Protocol | Port | Target Group | TLS Policy                            | Certificates |
| -------- | ---- | ------------ | ------------------------------------- | ------------ |
| TCP      | 80   | `tg-http`    | N/A                                   | N/A          |
| TLS      | 443  | `tg-https`   | `ELBSecurityPolicy-TLS13-1-2-2021-06` | `<ACM ARN>`  |

## 4.4 Target Groups

| Name     | Protocol | Port | Target Type | Health Check           | Stickiness | Dereg Delay |
| -------- | -------- | ---- | ----------- | ---------------------- | ---------- | ----------- |
| `tg-api` | TCP      | 8080 | IP          | TCP:8080, 10s interval | Disabled   | 300s        |
| `tg-app` | TCP      | 80   | IP          | TCP:80                 | Disabled   | 300s        |

## 4.5 Health Check Policy

| Setting             | Value                                     |
| ------------------- | ----------------------------------------- |
| Protocol            | TCP                                       |
| Interval            | 10s                                       |
| Timeout             | 6s                                        |
| Healthy Threshold   | 3                                         |
| Unhealthy Threshold | 3                                         |
| Matcher             | SuccessCode: 200–299 (for ALB-backed TGs) |

## 4.6 Security Model

| Aspect             | Implementation                                           |
| ------------------ | -------------------------------------------------------- |
| Network Access     | Controlled via Security Groups and NACLs                 |
| TLS Termination    | Disabled (TCP mode)                                      |
| Source Restriction | API Gateway / Akamai IPs only                            |
| Logging            | S3 access logs, encrypted with KMS                       |
| IAM Roles          | Restricted IAM for Terraform deployment                  |
| Monitoring         | CloudWatch metrics, alarms integrated to SNS / PagerDuty |

## 4.7 Integrations

| Integration | Description                      | Notes                          |
| ----------- | -------------------------------- | ------------------------------ |
| API Gateway | Private integration via VPC Link | `<api-id>/v1/brengine`         |
| ECS / EKS   | Targets via IP mode              | `<svc-namespace/service-name>` |
| ALB         | Optional upstream chaining       | `<internal>`                   |

## 4.8 Observability

| Metric                       | Threshold | Alarm Action        |
| ---------------------------- | --------- | ------------------- |
| HealthyHostCount < 1         | Critical  | Notify DevOps       |
| TCP_Client_Reset_Count > 100 | Warning   | Investigate backend |
| ProcessedBytes anomaly       | Info      | Track burst         |

## 4.9 DNS

| Record                  | Type | Alias Target | TTL |
| ----------------------- | ---- | ------------ | --- |
| `nlb.<env>.internal`    | A    | `<nlb-dns>`  | 60  |
| `api.<env>.company.com` | A    | `<api-gw>`   |     |

---

# 5. Terraform (CIO)
# 6. Migration & Validation
# 7. Configuration Deltas (AS-IS → TO-BE)
# 8. Runbooks
# 9. Risks & Decisions
# 10. Tickets & Ownership
# 11. Appendices


---

Would you like me to also generate the **matching Terraform variable file (variables.tf)** and **environment tfvars template (uat/prod)** to go with this LLD (so that the Infra team can start coding directly)?




-----------------------------------------------------------------
1. Executive Summary
Objective: Replicate and harden the existing CloudFront configuration from the hWP AWS account into the CIO AWS environments.
Key outcomes
Parity with legacy distribution(s) (aliases, origins, behaviors, policies)
Security alignment (TLS policy, WAFv2, OAI/OAC, headers)
Observability (standard logs & real-time logs), runbooks
Repeatable IaC (Terraform) and a safe, reversible cutover
2. Scope & Assumptions
In scope
CloudFront Distributions (Web)
Origins: S3, ALB/NLB, API Gateway, Custom
Cache/Origin-Request/Response-Headers Policies (managed & custom)
OAI / OAC, Origin Groups (failover)
Viewer Certificate (ACM us-east-1) & TLS security policy
Geo restrictions, signed URL/cookies, Key Groups (if used)
WAFv2 (Global scope) association
Standard access logs to S3, Real-Time Logs to Kinesis (if used)
CloudFront Functions & Lambda@Edge associations
DNS (Route 53 aliases), invalidation patterns
Out of scope
Application code in origins
Non-CloudFront edge (e.g., full Akamai config), except where it integrates
Assumptions
Access to old account is read-only but sufficient (cloudfront:get/list, wafv2:get/list, acm:describe in us-east-1, lambda:get, route53:get/list)
Certificates can be re-issued or re-imported in CIO account

3. AS-IS (hWP AWS Account)
3.1 Environment Map
3.2 Distribution Inventory
3.3 Viewer Certificate & TLS
3.4 Origins
3.5 Origin Groups (Failover)
3.6 Cache Behaviors
3.6.1 Default Cache Behavior
3.6.2 Ordered Behaviors
3.7 Policies (Referenced)
3.7.1 Cache Policies
3.7.2 Origin Request Policies
3.7.3 Response Headers Policies
3.8 Security
3.8.1 WAFv2 (Global)
3.8.2 OAI / OAC
3.8.3 Signed URLs / Cookies / Key Groups (if applicable)
3.9 Logging & Monitoring
3.10 Functions at the Edge
3.11 DNS
3.12 Invalidations (Patterns)

4. TO-BE Design (CIO Account)
5. Migration & Validation
6. Risks & Decisions
7. Appendices









----------------------------------------------------------------------------
#!/usr/bin/env bash
set -euo pipefail

DISTRIB_ID="${1:-}"  # pass the distribution ID as arg
if [[ -z "$DISTRIB_ID" ]]; then
  echo "Usage: $0 <DISTRIBUTION_ID>"
  exit 1
fi

OUT="cf-export-$DISTRIB_ID-$(date +%Y%m%d%H%M%S)"
mkdir -p "$OUT"
echo "Writing to $OUT"

# Core
aws cloudfront get-distribution-config --id "$DISTRIB_ID" > "$OUT/dist-config.json"
aws cloudfront get-distribution        --id "$DISTRIB_ID" > "$OUT/dist.json"
aws cloudfront list-tags-for-resource --resource "arn:aws:cloudfront::$(aws sts get-caller-identity --query Account --output text):distribution/$DISTRIB_ID" > "$OUT/tags.json" || true
aws cloudfront list-invalidations --distribution-id "$DISTRIB_ID" > "$OUT/invalidations.json" || true

# Policies (lists)
aws cloudfront list-cache-policies --type managed > "$OUT/cache-policies-managed.json"
aws cloudfront list-cache-policies --type custom  > "$OUT/cache-policies-custom.json"
aws cloudfront list-origin-request-policies --type managed > "$OUT/orp-managed.json"
aws cloudfront list-origin-request-policies --type custom  > "$OUT/orp-custom.json"
aws cloudfront list-response-headers-policies --type managed > "$OUT/rhp-managed.json"
aws cloudfront list-response-headers-policies --type custom  > "$OUT/rhp-custom.json"

# CloudFront Functions
aws cloudfront list-functions > "$OUT/cff-list.json"

# OAI / OAC
aws cloudfront list-cloud-front-origin-access-identities > "$OUT/oai-list.json" || true
aws cloudfront list-origin-access-controls > "$OUT/oac-list.json" || true

# Real-time logs
aws cloudfront list-realtime-log-configs > "$OUT/rtlog-list.json" || true

# Attempt to fetch associated WAF (GLOBAL) by listing; refine manually later
aws wafv2 list-web-acls --scope CLOUDFRONT > "$OUT/webacls.json" || true

# Extract ACM ARN (if present) and describe
ACM_ARN=$(jq -r '.DistributionConfig.ViewerCertificate.ACMCertificateArn // empty' "$OUT/dist-config.json")
if [[ -n "$ACM_ARN" ]]; then
  aws acm describe-certificate --certificate-arn "$ACM_ARN" --region us-east-1 > "$OUT/acm.json" || true
fi

echo "Done. Next: inspect $OUT/dist-config.json for:
- Behavior policy IDs (then run get-* for each to export full JSON)
- LambdaFunctionAssociations (fetch via aws lambda get-function in us-east-1)
- ResponseHeadersPolicy/CachePolicy/OriginRequestPolicy IDs to export in full
- Real-time log config ARN to export
- WAF WebACL name/id to export
"






--------------------------------
1. Executive Summary
Objective: replicate and harden existing API Gateway config from hWP into CIO AWS (UAT → PROD → DEV).
Scope: API Gateway + integrations (VPC Link/ALB/NLB/Lambda), custom domains, WAF/logging/monitoring, IAM/resource policies, quotas/usage plans, deployments/stages, DNS edge (Akamai).
Out of scope: app code changes, Akamai config itself (tracked elsewhere).
2. References
HLD link, Security Model link, Data flows, Akamai edge doc, Service runbooks.
OpenAPI/Swagger exports attached (as-is + to-be).
Terraform module(s) and workspace names (to be used by TFE).
3. As-Is Snapshot (hWP Account)
Goal: a faithful inventory you can diff.
API type & endpoint type: REST vs HTTP; Regional/Private; endpoint URL.
APIs & versions: IDs, names, tags.
Stages: names, variables, canary settings, stage-level throttling & caching.
Resources/Methods: full tree, methods, auth, request/response models, CORS.
Integrations: type (VPC Link/HTTP/Lambda), URIs, timeouts, retries, mapping templates.
Authorizers: Lambda/Cognito, TTLs, identity sources.
Security: resource policy, API keys, usage plans/quotas, WAF association.
Domains: custom domain names, base path mappings, ACM cert ARNs.
Logging/Monitoring: execution logging level, access logs (format + destination), metrics/alarms.
Gateway Responses: customized 4XX/5XX bodies/headers.
Quotas & throttles: account-level vs stage/method-level.
Known exceptions/workarounds: e.g., header enforcement logic at ALB; X-Api-Gateway header allowlist.
(Attach raw exports: get-rest-apis, get-stages, get-resources, get-integration, OpenAPI export.)
4. To-Be Design (CIO Account – UAT)
4.1 High-Level Architecture
Endpoint type (Regional/Private) and reasoning (Akamai edge → Regional; or Private + VPC Links).
Integration pattern(s):
VPC Link → NLB/ALB → EKS services (paths like /brengine/{proxy+})
or Lambda proxy for select routes.
Edge: Akamai → (Custom Domain) → API GW → VPC Link/Integration.
Diagram (Mermaid) embedded.
4.2 API Definition
API type: REST or HTTP (justify; migration parity or rationalized).
Resources & methods: full list (table), including any new/removed paths.
Request validation: models, validators, schema links.
Mapping templates: request/response (content-type, passthrough rules).
CORS: allowed origins/headers/methods; preflight caching.
4.3 Integrations
VPC Link(s): names, subnets, SGs, NLB ARNs, health check ports/paths.
HTTP/Lambda integration config: URIs, timeouts, retries, TLS.
Headers: required forwards (e.g., X-Api-Gateway enforcement, X-Forwarded-For, correlation IDs).
Error mapping: integration response → method response (status codes, bodies).
4.4 AuthN/Z & Security
Authorizer: Cognito/Lambda (ARNs, TTLs, identity sources).
Resource policy: org lock, source VPCe/VPC CIDR allows, Akamai egress IPs if needed.
API keys & usage plans: who gets keys, quotas/burst per plan.
WAF: association (WebACL ARN), managed rule sets, rate limits.
TLS: ACM certs for custom domains (UAT), renewal strategy.
Header enforcement: pattern used (ALB rule or API GW mapping); document rule logic.
Data protection: PII in logs redaction, encryption at rest (logs, cache).
4.5 Stages & Deployments
Stages: uat, prod (future dev), stage variables.
Canary: % traffic, metrics guardrails.
Caching: enabled? per-method; TTL; cache encryption.
Throttling: stage and method limits (RPS/burst).
4.6 Domains & Routing
Custom domain names (UAT hostnames), base path mappings.
Akamai DNS/CNAME target(s) and validation steps.
Failover/rollback: flip back to old API domain or previous stage.
4.7 Observability
Execution logs: log group names, retention, log level (ERROR/INFO).
Access logs: destination (CW Logs), JSON format (sample below).
Metrics/Alarms: 4XX/5XX percentages, Latency p95/p99, IntegrationLatency, Throttle count; SNS topics; runbooks.
{
  "requestId":"$context.requestId",
  "ip":"$context.identity.sourceIp",
  "caller":"$context.identity.caller",
  "user":"$context.identity.user",
  "requestTime":"$context.requestTime",
  "httpMethod":"$context.httpMethod",
  "resourcePath":"$context.resourcePath",
  "status":"$context.status",
  "protocol":"$context.protocol",
  "responseLength":"$context.responseLength",
  "integrationStatus":"$context.integration.status",
  "latency":"$context.responseLatency"
}
4.8 Limits, Performance & NFRs
Expected TPS, peak/burst, latency targets, payload sizes.
AWS quotas relevant to design (routes, mapping templates, VPC Link count).
Cost notes (cache, logs, WAF, data transfer).
5. Configuration Deltas (As-Is → To-Be)
A crisp diff table to brief approvers and TFE:
Area	hWP (As-Is)	CIO (To-Be)	Rationale/Impact
Endpoint type	Regional	Regional	Keep edge parity w/ Akamai
Auth	Lambda authorizer v1	Same	No change
VPC Link	vpc-link-hwp-01 → nlb-abc	vpc-link-cio-uat-01 → nlb-xyz	New NLB ARNs
Paths	/brengine/{proxy+}	Same + header check	Header guard at ALB
Logging	INFO, 7 days	ERROR/INFO, 30 days	Compliance retention
WAF	Not attached	Assoc. WebACL-UAT	PCI/WAF baseline
Domains	api-uat.hwp.example.com	api-uat.cio.example.com	Akamai CNAME cut
6. Terraform Handoff (for TFE Team)
6.1 Workspaces & Modules
Workspace names: cio-uat-apigw, cio-prod-apigw, cio-dev-apigw.
Module(s): modules/apigw-rest (or apigw-http) + modules/vpc-link (if owned by API team) + modules/custom-domain.
State: new; imports not required (greenfield) or import plan if reusing.
6.2 Module Interface (example)
variable "api_name"        { type = string }
variable "endpoint_type"   { type = string } # "REGIONAL" | "PRIVATE"
variable "openapi_spec_s3" { type = string } # s3://bucket/path/openapi.yaml
variable "stage_name"      { type = string } # "uat"
variable "stage_vars"      { type = map(string) }
variable "vpc_link_id"     { type = string }
variable "integrations"    { type = map(any) } # path→target map if not full OAS
variable "resource_policy" { type = string }   # JSON
variable "waf_web_acl_arn" { type = string }
variable "domain_name"     { type = string }
variable "acm_cert_arn"    { type = string }
variable "base_path_map"   { type = map(string) } # basepath→api_stage
variable "access_log_cfg"  { type = object({ log_group = string, format = string }) }
variable "cw_retention_days" { type = number }
Example Resource Policy (org/VPCe/Akamai lock)
{
  "Version":"2012-10-17",
  "Statement":[
    {"Effect":"Allow","Principal":"*","Action":"execute-api:Invoke","Resource":"arn:aws:execute-api:REGION:ACCT:API_ID/*/*/*",
     "Condition":{"StringEquals":{"aws:PrincipalOrgID":"o-xxxxxxxx"}}},
    {"Effect":"Allow","Principal":"*","Action":"execute-api:Invoke","Resource":"arn:aws:execute-api:REGION:ACCT:API_ID/*/*/*",
     "Condition":{"StringEquals":{"aws:SourceVpce":"vpce-xxxxxxxx"}}}
  ]
}
7. Build & Migration Plan
Export as-is OpenAPI + JSON inventories from hWP.
Normalize: remove account-specific ARNs/IDs; parameterize.
Author to-be OpenAPI (same paths/methods) + CIO specifics (VPC Link IDs, domains).
TFE apply to create API, stage, domain, mappings, WAF, logging.
Smoke test internal invoke URLs; validate mappings, CORS, auth, headers.
Akamai CNAME → CIO custom domain; health checks green.
Cutover/rollback: DNS TTL strategy; rollback to hWP domain if needed.
8. Testing & Validation
Functional: method-level 200/4XX/5XX, error mappings.
Non-functional: latency p95, throttling, cache hit if enabled.
Security: resource policy denies outside org/VPCe; authorizer happy path & failure.
Observability: logs produced with expected JSON; alarms fire on forced 5XX.
Edge: Akamai → API GW end-to-end with expected headers.
9. Operations
Runbooks: deploy, rollback, rotating certs, rotating authorizer secrets, WAF updates.
DR: recreate in another region? (if applicable).
Maintenance windows & change control steps.
Ownership & contacts (API, Networking, Security, TFE, Edge, App teams).
10. Risks & Decisions
Key decisions (REST vs HTTP, Regional vs Private, WAF attach, header-enforcement location).
Top risks (Akamai healthcheck mismatch, mapping template regressions, VPC Link health) with mitigations.
11. Appendices











-------------------------------------------------------
Chronological plan (critical path with dependencies)
Programme & Access Foundations
Jira task list setup (teams & service users) → enables tracking and approvals.
CyberArk service account password renew (if required) → needed before creating CI/CD secrets.
HashiCorp Vault setup (namespaces/paths, auth method, policies, secret engines) → needed for Jenkins/Harness/EKS to fetch secrets.
CheckmarxOne setup (org/projects, policies, tokens) → required before CI pipelines and to gate releases.
Source Control & Repo Hygiene
Bitbucket repository setup (covers “Create repositories”) — repos, default branches, CODEOWNERS, PR templates, minimal docs.
Low-Level Designs → Infra Requests
Identify services to be deployed inside EKS (list, images, charts, configs, secrets, data needs).
EKS LLD (cluster, nodegroups, IAM, IRSA, SGs, ingress class).
LLD for AWS services (RDS/Aurora, DynamoDB, S3, SNS, Lambda, alarms, VPC endpoints, IAM).
TFE request for deploying AWS services (modules, vars, workspaces, approvals).
Provisioning & Infra Bring-up
Infrastructure validation once TFE team deployed components (EKS reachable, IRSA, ALB/NLB, RDS/Dynamo/S3, VPC endpoints, CloudWatch, SNS topics).
CI Foundations
Jenkins setup (service accounts & secrets in Vault/CyberArk, agents, folders, shared libs).
Jenkins pipelines for Helm charts → JFrog + CheckmarxOne scans.
Jenkins pipelines for container images → JFrog + CheckmarxOne scans.
Fix CheckmarxOne vulnerabilities (policy gates to “pass UAT”).
CD Foundations
Harness setup (secrets via Vault, connectors to Bitbucket, JFrog, EKS; create Harness delegate).
Harness service to connect to service Helm inside JFrog (Services + Manifests).
Harness environment to connect to EKS (Infra defs, namespaces, RBAC).
Harness pipeline to deploy each service to UAT (stages, approvals, post-deploy checks).
App & Platform Artifacts
Lambda code development (env configs/secrets from Vault, queues/topics).
Lambda code deployment (via Harness/Jenkins or TFE module as per pattern).
SNS, alarms deployment (topics, subs, CW alarms, alert routes).
Data Migration (UAT → new UAT)
DynamoDB migration (export/import or DMS; cutover plan).
PostgreSQL migration (dump/restore or DMS; users/roles; extensions).
S3 data migration (batch copy with ACLs/metadata; checksum verification).
Edge & DNS
Akamai team request for DNS deployments for internal URLs (origins, WAF/bot/rate/rules, TLS, health checks).
URL validation once Akamai deployed (end-to-end over Akamai → ALB/NLB → Ingress).
Validation & Sign-off
Application validation from customer team (functional, non-functional smoke, data checks).
UAT sign-off.
What can run in parallel
Early parallel: (2) Repo setup can start while (1) Programme & Access foundations run.
Design parallel: EKS LLD (7) and AWS services LLD (8) can proceed in parallel after (6) Identify services.
CI vs TFE: Jenkins setup (11) and pipeline authoring (12–13) can run while TFE is building infra (9–10).
CD vs CI: Harness setup (15–18) can begin after minimal infra validation (10) and once charts/images exist in JFrog (12–13).
App & Alerts: Lambda/SNS/alarms (19–21) can start after (10) infra validation.
Data migrations (22–24) wait on target infra (10) and IAM/VPC endpoints; they can run in parallel with CD (15–18) but must complete before customer app validation (27).
Akamai (25) can be pre-staged (config reviewed) but final DNS cut needs stable UAT endpoints (after 18 & 21).
External dependencies & owners
TFE team: (9) provisioning; (10) infra validation support.
Security/AppSec (CheckmarxOne owners): (4), (12–14) policy gates.
CyberArk team: (2) renewals & app registrations.
Vault platform team: (3) namespaces, auth methods, policies.
Akamai/Edge team: (25–26) DNS, WAF/bot/rate limits, origins, certs.
DBA/Data team: (22–24) DMS/dumps, users/roles, data verification.
Networking: VPC endpoints, firewall rules for ECR/JFrog/Bitbucket/Akamai health checks.
Customer QA/Product: (27) validation; (28) sign-off.
Dependency table (quick reference)
#	Task	Depends on	External?
1	Jira task list setup	—	—
2	CyberArk password renew	—	CyberArk
3	HashiCorp Vault setup	2	Vault team
4	CheckmarxOne setup	—	AppSec
5	Bitbucket repositories	1	—
6	Identify services for EKS	5	App owners
7	EKS LLD	6	—
8	AWS Services LLD	6	—
9	TFE request for AWS	7,8	TFE team
10	Infra validation (post-TFE)	9	TFE team
11	Jenkins setup	2,3,5	—
12	Jenkins pipeline: charts→JFrog + Cx1	4,5,11	—
13	Jenkins pipeline: images→JFrog + Cx1	4,5,11	—
14	Fix CheckmarxOne vulns	12,13	AppSec
15	Harness setup + delegate	3,10	—
16	Harness service (JFrog Helm)	12,15	—
17	Harness environment (EKS)	10,15	—
18	Harness pipelines (deploy to UAT)	14,16,17	—
19	Lambda code development	5,3	—
20	Lambda code deployment	10,15,19	—
21	SNS, alarms deployment	10	—
22	DynamoDB migration	10	DBA/Data
23	PostgreSQL migration	10	DBA/Data
24	S3 migration	10	DBA/Data
25	Akamai DNS requests	10,18	Akamai
26	URL validation (Akamai)	25	Akamai
27	Application validation (customer)	18,20–24,26	Customer QA
28	UAT sign-off	27	Customer/Stakeholders





--------------------------------------------------------------------
Portal Migration – Next Clarifications & Access Requirements
1. Environments & Data
Please confirm our understanding: today only UAT & PROD environments exist, and a Dev environment will be provisioned after PROD deployment – is that correct?
What is the current approved data migration plan for PostgreSQL, DynamoDB, and S3 buckets?
Are there any compliance/security requirements we must align with (e.g., GDPR, PCI, Dome9, Rapid7)?
2. Networking & Security
How will the portal be exposed in the new account? We understand today it is behind Akamai & CloudFront – should this remain unchanged?
Are the VPC, subnets, and security groups in the new account provisioned via Terraform, or created manually?
More generally – how were the EKS, VPC, and infra components deployed today (Terraform Enterprise, CloudFormation, or other)?
Are there any cross-account IAM roles, guardrails, or policies that must be replicated?
We see jumpboxes in the console – are these the same as bastion hosts intended for access?
3. CI/CD & Tooling
Please confirm the expected model:
Infra components (API Gateway, VPC, EKS, etc.) → deployed via Terraform Enterprise.
Services & components inside EKS → deployed via Harness.
Do let us know if this needs to be adjusted.
Is there an existing Bitbucket repo for the portal code? If yes, can you please share the codebase access as well.
Are CI/CD pipelines already defined? From previous communication, we understand pipelines exist but are not yet set up – once access is provided, we can validate and proceed.
Confirm Artifactory access for images/dependencies.
Confirm CyberArk / Vault access for secret management. Since AWS Secrets Manager is not permitted, will we use CyberArk or HashiCorp Vault? Has the secrets integration design already been done, or is support needed in designing this?
Confirm Harness URL & credentials (if Harness will be used for app deployments).
4. Observability & Operations
What are the monitoring & logging requirements in the new account?
Can you share the existing portal observability URLs/dashboards (CloudWatch, Prometheus, Grafana, ELK, etc.)?
Who owns incident response & support post-migration?
Are there runbooks or SOPs that should be carried forward?
5. Cutover & Governance
Will migration be phased (service by service) or big-bang (all at once)?
What is the agreed downtime tolerance?
Who are the sign-off stakeholders for:
Application / Architecture
Infrastructure
Operations / Support
6. Additional Requests
Can we get access to the current Ethos portal to familiarize ourselves with what we are migrating?
Does any prod.local data need to be migrated to prod.cloud AD?
What is the current process for security scans on images – is Checkmarx onboarded already?
What are the different services inside the Ethos portal today? Where can we find more detailed documentation on them?
