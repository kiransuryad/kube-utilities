
build_prompt() {
  # Load current AWS profile
  local current_profile=$AWS_PROFILE

  # Read the configuration file to get the account number, Kubernetes context, and environment type
  local config_line=$(awk -v profile="$current_profile" -F, '$1 == profile {print $0}' /path/to/aws_k8s_config.txt)

  local aws_account=$(echo $config_line | cut -d ',' -f2)
  local k8s_context=$(echo $config_line | cut -d ',' -f3)
  local env_type=$(echo $config_line | cut -d ',' -f4)

  # Your existing prompt components
  prompt_status
  prompt_context
  prompt_dir
  prompt_git
  prompt_bzr
  prompt_hg
  
  # Set AWS details in the prompt, change visual style based on environment type
  if [[ -n "$aws_account" ]]; then
    case "$env_type" in
      prod)
        prompt_segment red yellow "ðŸ›‘ AWS: ${current_profile} (${aws_account})"
        ;;
      nonprod)
        prompt_segment green black "ðŸŒ± AWS: ${current_profile} (${aws_account})"
        ;;
    esac
  fi

  # Set Kubernetes context in the prompt, if applicable
  if [[ -n "$k8s_context" ]]; then
    PS1+="$(kube_ps1) "
  else
    PS1+="[K8s context not applicable] "
  fi

  prompt_end
}

profile1,123456789012,cluster1,prod
profile2,234567890123,cluster2,nonprod
profile3,345678901234,cluster3,nonprod







--------
build_prompt() {
  # Your existing prompt components
  prompt_status
  prompt_context
  prompt_dir
  prompt_git
  prompt_bzr
  prompt_hg
  prompt_aws

  # Fetch AWS account number
  local aws_account=$(aws sts get-caller-identity --output text --query 'Account' 2>/dev/null)
  
  # Decide whether to show kube-ps1 based on AWS account
  case "$aws_account" in
    "123456789012")  # Suppose this is the account linked to your K8s context
      PS1+="$(kube_ps1) "
      ;;
    *)
      # Optionally, you can display nothing or some placeholder
      PS1+="[K8s context not applicable] "
      ;;
  esac

  prompt_end
}




# AWS Profile and Account:
# - display current AWS_PROFILE name and AWS account number
# - displays yellow on red if profile name contains 'production' or ends in '-prod'
# - displays black on green otherwise
prompt_aws() {
  [[ -z "$AWS_PROFILE" || "$SHOW_AWS_PROMPT" = false ]] && return

  # Fetch AWS account number
  local aws_account=$(aws sts get-caller-identity --output text --query 'Account' 2>/dev/null)

  # Check if aws_account is successfully fetched, otherwise show only AWS_PROFILE
  local aws_detail
  if [[ -n "$aws_account" ]]; then
    aws_detail="AWS: ${AWS_PROFILE} (${aws_account})"
  else
    aws_detail="AWS: ${AWS_PROFILE}"
  fi

  # Determine color scheme based on profile name
  case "$AWS_PROFILE" in
    *-prod|*production*) prompt_segment red yellow  "${aws_detail:gs/%/%%}" ;;
    *) prompt_segment green black "${aws_detail:gs/%/%%}" ;;
  esac
}



_kube_ps1_get_context_ns() {
  # Set the command time
  if [[ "$(_kube_ps1_shell_type)" == "bash" ]]; then
    if ((BASH_VERSINFO[0] >= 4 && BASH_VERSINFO[1] >= 2)); then
      _KUBE_PS1_LAST_TIME=$(printf '%(%s)T')
    else
      _KUBE_PS1_LAST_TIME=$(date +%s)
    fi
  elif [[ "$(_kube_ps1_shell_type)" == "zsh" ]]; then
    _KUBE_PS1_LAST_TIME=$EPOCHREALTIME
  fi

  KUBE_PS1_CONTEXT="${KUBE_PS1_CONTEXT:-N/A}"
  KUBE_PS1_NAMESPACE="${KUBE_PS1_NAMESPACE:-N/A}"
  KUBE_PS1_AWS_PROFILE="${KUBE_PS1_AWS_PROFILE:-N/A}"

  # Cache which cfgfiles we can read in case they change.
  local conf
  _KUBE_PS1_CFGFILES_READ_CACHE=
  for conf in $(_kube_ps1_split_config : "${KUBECONFIG:-${HOME}/.kube/config}"); do
    [[ -r $conf ]] && _KUBE_PS1_CFGFILES_READ_CACHE+=":$conf"
  done

  _kube_ps1_get_context
  _kube_ps1_get_ns
  _kube_ps1_get_aws_profile
}

_kube_ps1_get_aws_profile() {
  KUBE_PS1_AWS_PROFILE=$(kubectl config view --minify --output "jsonpath={.contexts[?(@.name=='$(kubectl config current-context)')].context.aws-profile}")
  if [[ -n "$KUBE_PS1_AWS_PROFILE" ]]; then
    export AWS_PROFILE=$KUBE_PS1_AWS_PROFILE
  fi
}

_kube_ps1_get_aws_profile() {
  KUBE_PS1_AWS_PROFILE=$(kubectl config view --minify --output "jsonpath={.users[?(@.name=='$(kubectl config current-context)')].user.exec.env[?(@.name=='AWS_PROFILE')].value}")
  if [[ -n "$KUBE_PS1_AWS_PROFILE" ]]; then
    export AWS_PROFILE=$KUBE_PS1_AWS_PROFILE
  fi
}
