Good Afternoon Team,

Thank you for your inputs and the details provided.

Please note the following updates:

CR Implementation Date: The Change Request (CR) implementation is now scheduled for Monday, 19th August 2024.
Updated CR Details:
CR ID: CH24001658959
Action Items:
Testing Requirements: Please confirm if testing is required before and after the CR implementation.
Testing Assignment: If testing is necessary, kindly specify who will be responsible for conducting the tests.
Your prompt feedback is appreciated. Let me know if further information is required.

Thank you,

Regards,
Kiran


----
I hope this message finds you well. We are in the process of the mandatory AWS RDS Certificate renewal and have successfully updated the certificates for our non-production and development environments earlier this week.

We are now preparing to proceed with the renewal of the production RDS certificates and kindly request your approval to move forward. Additionally, we would appreciate your insights on the following queries to ensure seamless coordination and compliance:

Has the client been informed of the upcoming renewal?
Could you provide a list of the Lines of Business (LOBs) that will be affected by this update?
Your prompt response will help us maintain the integrity and security of our services without disruption.

Thank you for your cooperation and support.


----
aws ec2 describe-instances --instance-id i-0123456789abcdef0 --query 'Reservations[*].Instances[*].IamInstanceProfile' --output json

aws ec2 disassociate-iam-instance-profile --association-id <association-id>


# Disassociate the old IAM role (if needed)
aws ec2 disassociate-iam-instance-profile --association-id <association-id>

# Associate the new IAM role
aws ec2 associate-iam-instance-profile --instance-id i-0123456789abcdef0 --iam-instance-profile Name=NewInstanceProfileName




----
Team,

We are undertaking a crucial upgrade of the EKS clusters within our EDP management AWS Account to enhance system integrity and security.

AWS has upgraded to version 1.22, which has introduced potential disruptions. Although some end users are currently utilizing these applications without reported issues, we must remain vigilant. To preemptively address any disruptions and ensure a seamless transition, we are planning a proactive migration to version 1.29. This upgrade is essential for maintaining compatibility with upcoming AWS updates and bolstering our overall system security.

While we anticipate that some applications may experience compatibility issues post-upgrade, we want to emphasize that resolving these issues may not always be within our control. The upgrade may result in certain applications breaking due to dependencies or compatibility problems. We will monitor the situation closely and address any issues that arise to the best of our abilities, but there may be limitations in our capacity to resolve all potential problems.





-----
We are initiating an upgrade of the EKS clusters within our EDP management AWS Account. This is a critical step to maintain the integrity and security of our infrastructure.

AWS has already upgraded the control plane to version 1.22, which has led to some potential application disruptions. To mitigate these issues and address security vulnerabilities, we are advancing to version 1.29. This upgrade is necessary to ensure compatibility with future AWS updates and to strengthen our overall system security.

During this upgrade, we will focus primarily on Jenkins and Keycloak. Our team is prepared to handle any issues that arise in these applications as part of the EKS upgrade process.

We are taking a proactive approach to resolve any disruptions and ensure a smooth transition. Your understanding and cooperation are appreciated as we work through these upgrades.


----
Thank you so much for your confirmation!

Could you please provide the details for our Prod deployment Readiness Checklist? I have prefilled some of the information and would appreciate your assistance in confirming and suggesting any necessary adjustments, especially regarding the impact on LOBs and their clients.

Your support is greatly appreciated.


---
Good afternoon Lokesh,

I hope this message finds you well.

As mentioned in the previous email, we have successfully updated the below RDS DB instance certificates.

To ensure seamless operations, please verify that your applications in the NonProd ARIC Accounts (DEVL-ARIC) are functioning as expected with the new certificates. If you could provide confirmation by this Friday, that would be greatly appreciated. In the absence of any issues, we will proceed with the assumption that everything is operating smoothly.

Additionally, we have scheduled the Prod Account (PPRD-ARIC) RDS Certificate renewals for early next week. Please note that if we do not hear back from you either positively or negatively by this Thursday, we will assume that as positive feedback and proceed with our changes from Monday.

Thank you for your cooperation and understanding. We are committed to providing you with the best support and ensuring minimal disruption.

Best regards,


---
Hi Team,

I am pleased to inform you that the SSL certificate upgrade for our AWS RDS instances has been successfully completed as of July 26, 2024. This upgrade ensures continued security and compliance for our database interactions.

What You Need to Do:

Please conduct a thorough test of your applications using the current RDS instances to confirm that they operate seamlessly with the updated certificates. This is crucial for ensuring that our applications maintain their functionality and performance standards.




----
Good morning all,

Thank you, Courtney and Casey, for your valuable feedback. Regarding your question about updating Keycloak to a newer version, we face a challenge due to our current deployment on the Keycloak 18.0.3-legacy version, which requires migration to a newer version rather than a straightforward update.

Rajesh, I would appreciate your insights and recommendations on migrating from Keycloak 18.0.3-legacy to the latest version, 25.0.2. Your expertise will be crucial in outlining our next steps.

Manuel, in light of our discussions, could you please share your thoughts on the feasibility of the Keycloak upgrade or suggest any alternative solutions that might better suit our needs?

Thanks for your cooperation.

Best regards,
Kiran

---
aws ec2 describe-instances \
    --query "Reservations[*].Instances[*].[InstanceId, Tags[?Key=='Name'].Value | [0], InstanceType]" \
    --filters "Name=instance-state-name,Values=running" \
    --output text



----
build_prompt() {
  # Load current AWS profile
  local current_profile=$AWS_PROFILE

  # Read the configuration file to get the account number, Kubernetes context, and environment type
  local config_line=$(awk -v profile="$current_profile" -F, '$1 == profile {print $0}' /path/to/aws_k8s_config.txt)

  local aws_account=$(echo $config_line | cut -d ',' -f2)
  local k8s_context=$(echo $config_line | cut -d ',' -f3)
  local env_type=$(echo $config_line | cut -d ',' -f4)

  # Your existing prompt components
  prompt_status
  prompt_context
  prompt_dir
  prompt_git
  prompt_bzr
  prompt_hg
  
  # Set AWS details in the prompt, change visual style based on environment type
  if [[ -n "$aws_account" ]]; then
    case "$env_type" in
      prod)
        prompt_segment red yellow "ðŸ›‘ AWS: ${current_profile} (${aws_account})"
        ;;
      nonprod)
        prompt_segment green black "ðŸŒ± AWS: ${current_profile} (${aws_account})"
        ;;
    esac
  fi

  # Set Kubernetes context in the prompt, if applicable
  if [[ -n "$k8s_context" ]]; then
    PS1+="$(kube_ps1) "
  else
    PS1+="[K8s context not applicable] "
  fi

  prompt_end
}

profile1,123456789012,cluster1,prod
profile2,234567890123,cluster2,nonprod
profile3,345678901234,cluster3,nonprod







--------
build_prompt() {
  # Your existing prompt components
  prompt_status
  prompt_context
  prompt_dir
  prompt_git
  prompt_bzr
  prompt_hg
  prompt_aws

  # Fetch AWS account number
  local aws_account=$(aws sts get-caller-identity --output text --query 'Account' 2>/dev/null)
  
  # Decide whether to show kube-ps1 based on AWS account
  case "$aws_account" in
    "123456789012")  # Suppose this is the account linked to your K8s context
      PS1+="$(kube_ps1) "
      ;;
    *)
      # Optionally, you can display nothing or some placeholder
      PS1+="[K8s context not applicable] "
      ;;
  esac

  prompt_end
}




# AWS Profile and Account:
# - display current AWS_PROFILE name and AWS account number
# - displays yellow on red if profile name contains 'production' or ends in '-prod'
# - displays black on green otherwise
prompt_aws() {
  [[ -z "$AWS_PROFILE" || "$SHOW_AWS_PROMPT" = false ]] && return

  # Fetch AWS account number
  local aws_account=$(aws sts get-caller-identity --output text --query 'Account' 2>/dev/null)

  # Check if aws_account is successfully fetched, otherwise show only AWS_PROFILE
  local aws_detail
  if [[ -n "$aws_account" ]]; then
    aws_detail="AWS: ${AWS_PROFILE} (${aws_account})"
  else
    aws_detail="AWS: ${AWS_PROFILE}"
  fi

  # Determine color scheme based on profile name
  case "$AWS_PROFILE" in
    *-prod|*production*) prompt_segment red yellow  "${aws_detail:gs/%/%%}" ;;
    *) prompt_segment green black "${aws_detail:gs/%/%%}" ;;
  esac
}



_kube_ps1_get_context_ns() {
  # Set the command time
  if [[ "$(_kube_ps1_shell_type)" == "bash" ]]; then
    if ((BASH_VERSINFO[0] >= 4 && BASH_VERSINFO[1] >= 2)); then
      _KUBE_PS1_LAST_TIME=$(printf '%(%s)T')
    else
      _KUBE_PS1_LAST_TIME=$(date +%s)
    fi
  elif [[ "$(_kube_ps1_shell_type)" == "zsh" ]]; then
    _KUBE_PS1_LAST_TIME=$EPOCHREALTIME
  fi

  KUBE_PS1_CONTEXT="${KUBE_PS1_CONTEXT:-N/A}"
  KUBE_PS1_NAMESPACE="${KUBE_PS1_NAMESPACE:-N/A}"
  KUBE_PS1_AWS_PROFILE="${KUBE_PS1_AWS_PROFILE:-N/A}"

  # Cache which cfgfiles we can read in case they change.
  local conf
  _KUBE_PS1_CFGFILES_READ_CACHE=
  for conf in $(_kube_ps1_split_config : "${KUBECONFIG:-${HOME}/.kube/config}"); do
    [[ -r $conf ]] && _KUBE_PS1_CFGFILES_READ_CACHE+=":$conf"
  done

  _kube_ps1_get_context
  _kube_ps1_get_ns
  _kube_ps1_get_aws_profile
}

_kube_ps1_get_aws_profile() {
  KUBE_PS1_AWS_PROFILE=$(kubectl config view --minify --output "jsonpath={.contexts[?(@.name=='$(kubectl config current-context)')].context.aws-profile}")
  if [[ -n "$KUBE_PS1_AWS_PROFILE" ]]; then
    export AWS_PROFILE=$KUBE_PS1_AWS_PROFILE
  fi
}

_kube_ps1_get_aws_profile() {
  KUBE_PS1_AWS_PROFILE=$(kubectl config view --minify --output "jsonpath={.users[?(@.name=='$(kubectl config current-context)')].user.exec.env[?(@.name=='AWS_PROFILE')].value}")
  if [[ -n "$KUBE_PS1_AWS_PROFILE" ]]; then
    export AWS_PROFILE=$KUBE_PS1_AWS_PROFILE
  fi
}
