from collections import Counter

def find_duplicates(file_path):
    try:
        # Read all lines from the file
        with open(file_path, 'r') as file:
            lines = file.readlines()
        
        # Strip newline characters and whitespace
        stripped_lines = [line.strip() for line in lines]
        
        # Count occurrences of each line
        line_counts = Counter(stripped_lines)
        
        # Find duplicates
        duplicates = {line: count for line, count in line_counts.items() if count > 1}
        
        if duplicates:
            print("Duplicate lines and their counts:")
            for line, count in duplicates.items():
                print(f"{line} - {count} times")
        else:
            print("No duplicates found.")
    except FileNotFoundError:
        print(f"Error: The file '{file_path}' was not found.")
    except Exception as e:
        print(f"An error occurred: {e}")

# Specify the path to your text file
file_path = 'your_file.txt'

# Call the function
find_duplicates(file_path)



-------
import boto3

# Path to the text file containing AMI IDs
ami_file_path = "amis.txt"

# AWS region
AWS_REGION = "eu-west-2"

# Initialize EC2 client
ec2_client = boto3.client("ec2", region_name=AWS_REGION)

def get_aws_amis():
    """
    Retrieve a list of all AMI IDs in the AWS region.
    """
    aws_amis = []
    try:
        # Describe images owned by the account
        paginator = ec2_client.get_paginator("describe_images")
        for page in paginator.paginate(Owners=["self"]):
            for image in page["Images"]:
                aws_amis.append(image["ImageId"])
        return aws_amis
    except Exception as e:
        print(f"Error fetching AMIs from AWS: {e}")
        return []

def check_ami_ids(ami_file, aws_amis):
    """
    Compare AMIs in the file with those in AWS.
    """
    with open(ami_file, "r") as file:
        input_ami_ids = [line.strip() for line in file.readlines() if line.strip()]
    
    missing_amis = [ami for ami in input_ami_ids if ami not in aws_amis]
    present_amis = [ami for ami in input_ami_ids if ami in aws_amis]

    # Print Results
    print("\nAMIs Found in AWS:")
    for ami in present_amis:
        print(ami)

    print("\nAMIs Missing in AWS:")
    for ami in missing_amis:
        print(ami)

    # Summary
    print(f"\nSummary: {len(present_amis)} AMIs found, {len(missing_amis)} AMIs missing.")

if __name__ == "__main__":
    print(f"Checking AMIs in region: {AWS_REGION}")
    aws_ami_list = get_aws_amis()
    
    if aws_ami_list:
        print(f"Retrieved {len(aws_ami_list)} AMIs from AWS.")
        check_ami_ids(ami_file_path, aws_ami_list)
    else:
        print("Failed to retrieve AMI list from AWS.")



------
import csv
import subprocess

# Path to the cleaned CSV file
csv_file_path = "ami_list.csv"

# Enable test mode to print AMIs without actual deregistration
TEST_MODE = True

# Lists to track results
amis_to_deregister = []
amis_to_skip = []
failed_deregistrations = []

# Open the CSV file and iterate through each row
with open(csv_file_path, mode="r") as file:
    csv_reader = csv.DictReader(file)
    for row in csv_reader:
        ami_id = row["ImageId"]
        decomm_status = row["Decomm (Yes/No)"]

        # Categorize based on Decomm status
        if decomm_status.strip().lower() == "yes":
            amis_to_deregister.append(ami_id)
        else:
            amis_to_skip.append(ami_id)

# Print the list of AMIs to be deregistered
print("\nList of AMIs to be deregistered:")
for ami in amis_to_deregister:
    print(ami)

# Print the list of AMIs that are not being deregistered
print("\nList of AMIs NOT being deregistered (Decomm = No):")
for ami in amis_to_skip:
    print(ami)

# Perform deregistration if not in TEST_MODE
if not TEST_MODE:
    for ami_id in amis_to_deregister:
        print(f"Attempting to deregister AMI: {ami_id}")
        try:
            # Deregister the AMI using AWS CLI
            result = subprocess.run(
                ["aws", "ec2", "deregister-image", "--image-id", ami_id],
                capture_output=True,
                text=True
            )
            if result.returncode == 0:
                print(f"Successfully deregistered AMI: {ami_id}")
            else:
                print(f"Failed to deregister AMI: {ami_id}. Error: {result.stderr}")
                failed_deregistrations.append(ami_id)
        except Exception as e:
            print(f"Exception occurred while deregistering AMI: {ami_id}. Exception: {e}")
            failed_deregistrations.append(ami_id)

# Log failed deregistrations
if not TEST_MODE and failed_deregistrations:
    print("\nList of AMIs that failed to deregister:")
    for ami in failed_deregistrations:
        print(ami)

# Test mode message
if TEST_MODE:
    print("\nTest mode is enabled. No AMIs were deregistered.")



  
