#!/bin/bash

# List of IP addresses
IPS=("192.168.1.1" "192.168.1.2" "192.168.1.3") # Modify with your target IPs

# Timeout for each Telnet attempt (in seconds)
TIMEOUT=5

# Loop through each IP and attempt a Telnet connection
for IP in "${IPS[@]}"
do
    echo "Connecting to $IP..."
    # Try to open a telnet connection with a timeout
    telnet $IP $TIMEOUT
    # Check the exit status
    if [ $? -eq 0 ]; then
        echo "Connection to $IP initiated."
    else
        echo "Failed to connect to $IP."
    fi
done | tee telnet_results.txt  # Log the output to a file




---
-whoami:
    @echo "Current user: `whoami`"
    @echo "User ID: `id -u`"
    @echo "Group ID: `id -g`"


check-tfenv-permissions:
    @echo "Checking permissions for tfenv directories..."
    @echo "Permissions for ~/.tfenv:"
    @ls -ld ~/.tfenv || echo "Directory ~/.tfenv does not exist."
    @echo "Permissions for tfenv binary:"
    @ls -l ~/.tfenv/bin/tfenv || echo "tfenv binary does not exist."
    @echo "Current user and permissions:"
    @whoami
    @id



fix-tfenv-permissions:
    @echo "Fixing permissions for the tfenv directory..."
    @sudo chown -R `whoami` ~/.tfenv
    @sudo chmod -R u+rwx ~/.tfenv
    @echo "Permissions after modification:"
    @ls -ld ~/.tfenv
    @ls -l ~/.tfenv/bin/tfenv



-----
# Use Red Hat Universal Base Image 9 Minimal as the base image
FROM registry.access.redhat.com/ubi9/ubi-minimal

# Install necessary packages using microdnf
RUN microdnf update -y && \
    microdnf install -y git bash curl openssl zip less python3 python3-pip tar gzip findutils wget && \
    microdnf clean all

# Create necessary directories and assign permissions
RUN mkdir -p /.terraform.d/plugins/linux_amd64 && \
    chown -R 1001:1001 /.terraform.d

# Set user to non-root
USER 1001

# Set up the working directory (assuming /app is your working directory)
WORKDIR /app

# Further installation steps...




---
# Use Red Hat Universal Base Image 9 Minimal as the base image
FROM registry.access.redhat.com/ubi9/ubi-minimal

# Set up the working directory
WORKDIR /app

# Install necessary packages using microdnf
RUN microdnf update -y && \
    microdnf install -y git bash curl openssl zip groff less python3 python3-pip tar gzip && \
    microdnf clean all

# Install aws-cli
RUN pip3 install awscli

# Install tfenv and a specific Terraform version
RUN git clone https://github.com/tfutils/tfenv.git ~/.tfenv && \
    ln -s ~/.tfenv/bin/* /usr/local/bin && \
    tfenv install 0.11.13 && \
    tfenv use 0.11.13

# Install kubectl
RUN curl -LO "https://storage.googleapis.com/kubernetes-release/release/v1.13.10/bin/linux/amd64/kubectl" && \
    mv kubectl /usr/local/bin/kubectl && \
    chmod +x /usr/local/bin/kubectl

# Install helm
RUN curl -LO "https://get.helm.sh/helm-v2.16.3-linux-amd64.tar.gz" && \
    tar -xzvf helm-v2.16.3-linux-amd64.tar.gz && \
    mv linux-amd64/helm /usr/local/bin/helm && \
    chmod +x /usr/local/bin/helm && \
    rm -rf linux-amd64 helm-v2.16.3-linux-amd64.tar.gz

# Set the container image to use a generic non-root user for security reasons
RUN mkdir /config && \
    chown 10001:10001 /config && \
    chown 10001:10001 /app
USER 10001

# Expose any ports needed (adjust this if you know ports you'll need)
# EXPOSE 8080 443
