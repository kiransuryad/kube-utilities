# --- Stage 1: Scan metrics-spi JAR with ClamAV ---
ARG CLAMAV_VERSION=1.2.1           # Set default, override at build time
ARG METRICS_SPI_VERSION=4.3.2      # Set default, override at build time

FROM clamav/clamav:${CLAMAV_VERSION} AS scanner

ARG METRICS_SPI_VERSION

RUN apt-get update && apt-get install -y curl
RUN mkdir /jars
WORKDIR /jars

# Download the SPI JAR
RUN curl -L -o keycloak-metrics-spi-${METRICS_SPI_VERSION}.jar \
    https://github.com/aerogear/keycloak-metrics-spi/releases/download/${METRICS_SPI_VERSION}/keycloak-metrics-spi-${METRICS_SPI_VERSION}.jar

# Update virus DB and scan
RUN freshclam && clamscan -r --bell -i .

# --- Stage 2: Build Keycloak with scanned SPI JAR ---
ARG KC_VERSION=26.2.5               # Set default, override at build time
FROM quay.io/keycloak/keycloak:${KC_VERSION}

ARG METRICS_SPI_VERSION

USER 0
RUN mkdir -p /opt/keycloak/providers

# Only copy the scanned JAR if it passed the scan
COPY --from=scanner /jars/keycloak-metrics-spi-${METRICS_SPI_VERSION}.jar /opt/keycloak/providers/

RUN chown 1000:1000 /opt/keycloak/providers/keycloak-metrics-spi-${METRICS_SPI_VERSION}.jar

USER 1000

# Entrypoint/CMD are inherited from base image

# Optional: expose versions as labels for provenance
LABEL org.opencontainers.image.source="https://github.com/aerogear/keycloak-metrics-spi"
LABEL org.keycloak.version="${KC_VERSION}"
LABEL org.clamav.version="${CLAMAV_VERSION}"
LABEL org.metrics-spi.version="${METRICS_SPI_VERSION}"


------------------
properties([
    parameters([
        string(name: 'INTERNAL_VERSION', description: 'internal server version (e.g., 1.0.0) for Velero', defaultValue: 'v1.16.0'),
        string(name: 'CLAMAV_VERSION', description: 'ClamAV image version', defaultValue: '1.2.1'),
        string(name: 'METRICS_SPI_VERSION', description: 'Keycloak Metrics SPI JAR version', defaultValue: '4.3.2'),
        string(name: 'KC_VERSION', description: 'Keycloak version', defaultValue: '26.2.5'),
    ])
])

// ...all your setup code...

stage('Build') {
    container('buildah') {
        sh """
            buildah bud \
              --build-arg CLAMAV_VERSION=${params.CLAMAV_VERSION} \
              --build-arg METRICS_SPI_VERSION=${params.METRICS_SPI_VERSION} \
              --build-arg KC_VERSION=${params.KC_VERSION} \
              --build-arg INTERNAL_VERSION=${params.INTERNAL_VERSION} \
              --layers \
              -f containers/keycloak/Dockerfile \
              -t ${containerImageMap.imageRegistry}/${containerImageMap.imageName}:${containerImageMap.imageTag} .
        """
    }
}

// SCA scan for the Dockerfile itself
stage('SCA Dockerfile Analysis - CxOne') {
    checkmarxASTScanner(
        branchName: 'develop',
        checkmarxInstallation: 'checkmarx-one-cli-latest',
        credentialsId: 'cxone_scan_creds',
        projectName: 'Keycloak-Dockerfile-SCA',
        serverUrl: 'https://fis.cxone.cloud',
        tenantName: 'fis',
        additionalOptions: "--scan-types sca --sca-package-manager docker --source-path containers/keycloak/Dockerfile --report-format summaryJSON",
        useOnDemandScan: true,
        useWithAdditionalOptions: true,
        useOnServerCredentials: true
    )
}




---------------------------------
@Library('common-lib03-stable@') _

String label = "build-${UUID.randomUUID().toString()}"
String SOURCECODE_REPO = "https://bitbucket.fis.dev/scm/edas/hydra-devops-automation.git"

String podTemplateString = """
apiVersion: v1
kind: Pod
spec:
  containers:
    - name: buildah
      image: caas-docker-release-local.docker.fis.dev/mirror/buildah/stable:v1.23.1
      imagePullPolicy: IfNotPresent
      command: ['cat']
      tty: true
      resources:
        limits:
          github.com/fuse: 1
    - name: podman
      image: caas-docker-release-local.docker.fis.dev/mirror/podman:vs.5.3.2
      imagePullPolicy: IfNotPresent
      command: ['cat']
      tty: true
      resources:
        requests:
          ephemeral-storage: "2Gi"
  imagePullSecrets:
    - name: edas-docker-snapshot-svcacct-hydra-cicd
"""

podTemplate(
    label: label,
    yaml: podTemplateString,
    serviceAccount: 'jenkins',
    runAsUser: 1000
) {
    node(label) {

        stage('Checkout Source') {
            git(
                branch: 'develop',
                credentialsId: 'svcacct-hydra-cicd',
                url: SOURCECODE_REPO,
                targetDirectory: '.'
            )
        }

        stage('Read Images Mirror Config') {
            // This is our dynamic image list!
            imagesConfig = readYaml file: 'config/images-to-mirror.yaml'
            if (!imagesConfig.images || imagesConfig.images.size() == 0) {
                error("No images found in images-to-mirror.yaml!")
            }
            echo "Images to scan: " + imagesConfig.images.collect { it.target }.join(', ')
        }

        // ===============================
        //         SCAN STAGE ONLY
        // ===============================

        stage('Scan All Private Images with Checkmarx One') {
            // Compose the list of all private repo images
            def imageArgs = imagesConfig.images.collect { it.target }.join(',')

            // Now run CheckmarxOne scan
            sh "mkdir -p \$WORKSPACE/scan_image"
            checkmarxASTScanner(
                branchName: 'master',
                checkmarxInstallation: 'checkmarx-one-cli-latest',
                credentialsId: 'cxone_scan_creds',
                projectName: 'Keycloak-A10003579', // Change as needed for your setup
                serverUrl: 'https://fis.cxone.cloud',
                tenantName: 'fis',
                additionalOptions: "--scan-types container-security --container-images ${imageArgs} --report-format summaryJSON --tags ContainerScan --project-tags Keycloak-Cont-Scan --threshold containers-critical=1;containers-high=1;containers-medium=1;containers-low=1",
                useOnDemandScan: true,
                useWithAdditionalOptions: true,
                useOnServerCredentials: true
            )
        }
    }
}






--------------------------
helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
helm repo update
helm template kube-prom --version 70.4.0 prometheus-community/kube-prometheus-stack \
  | grep -Po 'image:\s*\K\S+'



----
@Library('common-lib03-stable@') _

properties([
    parameters([
        string(name: 'INTERNAL_VERSION', description: 'Internal server version (e.g., 1.0.0)', defaultValue: '1.0.0'),
        string(name: 'INTERNAL_IMAGE_NAME', description: 'Internal image name (matches container folder name)'),
    ])
])

String label = "${UUID.randomUUID().toString()}"
String SOURCECODE_REPO = "https://bitbucket.fis.dev/scm/edas/hydra-devops-automation.git"

String podTemplateString = """
apiVersion: v1
kind: Pod
spec:
  containers:
    - name: buildah
      image: caas-docker-release-local.docker.fis.dev/mirror/buildah/stable:v1.23.1
      imagePullPolicy: IfNotPresent
      command: ['cat']
      tty: true
      resources:
        limits:
          github.com/fuse: 1
    - name: podman
      image: caas-docker-release-local.docker.fis.dev/mirror/podman:vs.5.3.2
      imagePullPolicy: IfNotPresent
      command: ['cat']
      tty: true
      resources:
        requests:
          ephemeral-storage: "2Gi"
  imagePullSecrets:
    - name: edas-docker-snapshot-svcacct-hydra-cicd
"""

podTemplate(
    label: label,
    yaml: podTemplateString,
    serviceAccount: 'jenkins',
    runAsUser: 1000
) {
    node(label) {

        stage('Checkout Source') {
            git(
                branch: 'develop',
                credentialsId: 'svcacct-hydra-cicd',
                url: SOURCECODE_REPO,
                targetDirectory: '.'
            )
        }

        stage('Read Images Mirror Config') {
            // This is our dynamic image list!
            imagesConfig = readYaml file: 'jenkins/images-to-mirror.yaml'
            if (!imagesConfig.images || imagesConfig.images.size() == 0) {
                error("No images found in images-to-mirror.yaml!")
            }
            echo "Images to mirror: " + imagesConfig.images.collect { "${it.source} -> ${it.target}" }.join(', ')
        }

        stage('Mirror External Images to JFrog') {
            container('podman') {
                withCredentials([usernamePassword(credentialsId: 'svcacct-hydra-cicd', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASS')]) {
                    sh """
                        podman login -u "$ART_USER" -p "$ART_PASS" edas-docker-snapshot-local.docker.fis.dev
                    """
                    imagesConfig.images.each { imgObj ->
                        echo "Mirroring ${imgObj.source} -> ${imgObj.target}"
                        // Pull from external, tag as JFrog, push to JFrog
                        sh """
                            set -e
                            podman pull ${imgObj.source}
                            podman tag ${imgObj.source} ${imgObj.target}
                            podman push ${imgObj.target}
                        """
                    }
                }
            }
        }

        // All other original stages (build image, scanning, etc.) are omitted as per your instructions.
    }
}








-----------------------
@Library('common-lib03-stable@') _

properties([
    parameters([
        string(name: 'INTERNAL_VERSION', description: 'Internal server version (e.g., 1.0.0)', defaultValue: '1.0.0'),
        string(name: 'INTERNAL_IMAGE_NAME', description: 'Internal image name (matches container folder name)'),
    ])
])

String label = "${UUID.randomUUID().toString()}"
String imageRegistry = 'edas-docker-snapshot-local.docker.fis.dev'
String img = "${imageRegistry}/test/${params.INTERNAL_IMAGE_NAME}:${params.INTERNAL_VERSION}"
String SOURCECODE_REPO = "https://bitbucket.fis.dev/scm/edas/hydra-devops-automation.git"

String podTemplateString = """
apiVersion: v1
kind: Pod
spec:
  containers:
    - name: buildah
      image: caas-docker-release-local.docker.fis.dev/mirror/buildah/stable:v1.23.1
      imagePullPolicy: IfNotPresent
      command: ['cat']
      tty: true
      resources:
        limits:
          github.com/fuse: 1
    - name: podman
      image: caas-docker-release-local.docker.fis.dev/mirror/podman:vs.5.3.2
      imagePullPolicy: IfNotPresent
      command: ['cat']
      tty: true
      resources:
        requests:
          ephemeral-storage: "2Gi"
  imagePullSecrets:
    - name: edas-docker-snapshot-svcacct-hydra-cicd
"""

podTemplate(
    label: label,
    yaml: podTemplateString,
    serviceAccount: 'jenkins',
    runAsUser: 1000
) {
    node(label) {

        stage('Checkout Source') {
            git(
                branch: 'develop',
                credentialsId: 'svcacct-hydra-cicd',
                url: SOURCECODE_REPO,
                targetDirectory: '.'
            )
        }

        // --- DYNAMIC IMAGE LIST FROM CONFIG ---
        def imageArgs = ""
        stage('Read Images Config') {
            def imagesConfig = readYaml file: 'jenkins/images-to-scan.yaml'
            imageArgs = imagesConfig.images.join(',')
            echo "Images to scan: ${imageArgs}"
            if (!imageArgs?.trim()) {
                error("No images found in images-to-scan.yaml!")
            }
        }

        stage('Build Image') {
            container('buildah') {
                sh """
                    echo "Building image: ${img} from containers/${params.INTERNAL_IMAGE_NAME}/Dockerfile"
                    buildah bud --build-arg INTERNAL_VERSION=${params.INTERNAL_VERSION} --layers -f containers/${params.INTERNAL_IMAGE_NAME}/Dockerfile -t ${img} containers/${params.INTERNAL_IMAGE_NAME}
                """
            }
        }

        stage('Push to JFrog Artifactory') {
            container('buildah') {
                withCredentials([usernamePassword(credentialsId: 'svcacct-hydra-cicd', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASS')]) {
                    sh """
                        buildah login -u $ART_USER -p $ART_PASS ${imageRegistry}
                        buildah push ${img} docker://${img}
                    """
                }
            }
        }

        stage('Authenticate for CxOne') {
            container('buildah') {
                withCredentials([usernamePassword(credentialsId: 'svcacct-hydra-cicd', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASS')]) {
                    sh """
                        echo "Ensuring CheckmarxOne can pull private image..."
                        buildah login -u $ART_USER -p $ART_PASS ${imageRegistry}
                    """
                }
            }
        }

        stage('Code Analysis - CxOne') {
            sh "mkdir -p \$WORKSPACE/scan_image"
            checkmarxASTScanner(
                branchName: '.unknown',
                checkmarxInstallation: 'checkmarx-one-cli-latest',
                credentialsId: 'cxone_scan_creds',
                projectName: 'Keycloak-A10003579',
                serverUrl: 'https://fis.cxone.cloud',
                tenantName: 'fis',
                additionalOptions: "--scan-types container-security --container-images ${imageArgs} --report-format summaryJSON --threshold containers-critical=1;containers-high=1;containers-medium=1;containers-low=1",
                useOnDemandScan: true,
                useWithAdditionalOptions: true,
                useOnServerCredentials: true
            )
        }

        stage('CxOne - Container Scan') {
            container('podman') {
                withEnv(["POD_RUNTIME_DIR=\$WORKSPACE", "HOME=\$WORKSPACE"]) {
                    withCredentials([usernamePassword(credentialsId: 'svcacct-hydra-cicd', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASS')]) {
                        sh '''
                            echo "Podman version:"
                            podman --version
                            echo "Logging into Artifactory with podman..."
                            podman login --authfile $WORKSPACE/.config/containers/auth.json edas-docker-snapshot-local.docker.fis.dev -u "$ART_USER" -p "$ART_PASS"
                        '''
                    }
                }
                emaLogger.logMsg("Creating directories for container scan...")
                sh "mkdir -p \$WORKSPACE/scan_image"
                checkmarxASTScanner(
                    branchName: 'master',
                    checkmarxInstallation: 'checkmarx-one-cli-latest',
                    credentialsId: 'cxone_scan_creds',
                    projectName: 'Keycloak-A10003579',
                    serverUrl: 'https://fis.cxone.cloud',
                    tenantName: 'fis',
                    additionalOptions: "--scan-types container-security --container-images ${imageArgs} --report-format summaryJSON --tags ContainerScan --project-tags Keycloak-Cont-Scan --threshold containers-critical=1;containers-high=1;containers-medium=1;containers-low=1",
                    useOnDemandScan: true,
                    useWithAdditionalOptions: true,
                    useOnServerCredentials: true
                )
            }
        }
    }
}







--------------------------
stage('Podman Login') {
  container('podman') {
    withCredentials([usernamePassword(credentialsId: 'svcacct-hydra-cicd', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASS')]) {
      sh '''
        echo "Podman version:"
        podman --version
        echo "Logging into Artifactory with podman..."
        podman login -u "$ART_USER" -p "$ART_PASS" edas-docker-snapshot-local.docker.fis.dev
      '''
    }
  }
}


------
stage('Push to JFrog Artifactory') {
    container('buildah') {
        withCredentials([usernamePassword(...)]) {
            sh """
                buildah login -u $ART_USER -p $ART_PASS ${imageRegistry}
                buildah push ${img} docker://${img}
            """
        }
    }
}

stage('Authenticate for CxOne') {
    container('buildah') {
        withCredentials([usernamePassword(credentialsId: 'svccacct-hydra-cicd', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASS')]) {
            sh """
                echo "Ensuring CheckmarxOne can pull private image..."
                buildah login -u $ART_USER -p $ART_PASS ${imageRegistry}
            """
        }
    }
}

stage('Code Analysis - CxOne') {
    checkmarxASTScanner(
        branchName: '.unknown',
        checkmarxInstallation: 'checkmarx-one-cli-latest',
        credentialsId: 'cxone_scan_creds',
        projectName: "${params.INTERNAL_IMAGE_NAME}",
        serverUrl: 'https://fis.cxone.cloud',
        tenantName: 'fis',
        additionalOptions: "--scan-types container-security --container-images ${img} --report-format summaryJSON --threshold containers-critical=1;containers-high=1;containers-medium=1;containers-low=0 --project-groups CxOne_CQ_${params.INTERNAL_IMAGE_NAME}",
        useOwnAdditionalOptions: true,
        useOwnServerCredentials: true
    )
}







---------------
stage('Build Image') {
    container('buildah') {
        sh """
            echo "Building image: ${img} from containers/${params.INTERNAL_IMAGE_NAME}/Dockerfile"
            buildah bud --build-arg INTERNAL_VERSION=${params.INTERNAL_VERSION} --layers -f containers/${params.INTERNAL_IMAGE_NAME}/Dockerfile -t ${img} containers/${params.INTERNAL_IMAGE_NAME}
            
            echo "Saving image to tarball for scan"
            buildah push ${img} oci-archive:${WORKSPACE}/scan_image/${params.INTERNAL_IMAGE_NAME}.tar
        """
    }
}

stage('Code Analysis - CxOne') {
    checkmarxASTScanner(
        branchName: '.unknown',
        checkmarxInstallation: 'checkmarx-one-cli-latest',
        credentialsId: 'cxone_scan_creds',
        projectName: "${params.INTERNAL_IMAGE_NAME}",
        serverUrl: 'https://fis.cxone.cloud',
        tenantName: 'fis',
        additionalOptions: "-s ${WORKSPACE}/scan_image/${params.INTERNAL_IMAGE_NAME}.tar --scan-types container-security --report-format summaryJSON --threshold containers-critical=1;containers-high=1;containers-medium=1;containers-low=0 --project-groups CxOne_CQ_${params.INTERNAL_IMAGE_NAME}",
        useOwnAdditionalOptions: true,
        useOwnServerCredentials: true
    )
}





-------------------
@Library('common-lib3-stable') _

properties([
    parameters([
        string(name: 'INTERNAL_VERSION', description: 'Internal server version (e.g., 1.0.0)', defaultValue: '1.0.0'),
        string(name: 'INTERNAL_IMAGE_NAME', description: 'Internal image name (matches container folder name)'),
    ])
])

String label = "build-${UUID.randomUUID().toString()}"
String imageRegistry = 'edas-docker-snapshot-local.docker.fis.dev'
String img = "${imageRegistry}/${params.INTERNAL_IMAGE_NAME}:${params.INTERNAL_VERSION}"

podTemplate(
    label: label,
    serviceAccount: 'jenkins',
    containers: [
        containerTemplate(
            name: 'buildah',
            image: 'edas-docker-release-local.docker.fis.dev/mirror/buildah/stable/v1.23.1',
            ttyEnabled: true,
            command: 'cat',
            imagePullPolicy: 'IfNotPresent',
            resources: [limits: [github_com/fuse: 1]]
        )
    ],
    imagePullSecrets: ['edas-docker-release-local-ro'],
    runAsUser: 1000
) {
    node(label) {
        stage('Checkout Source') {
            checkout scm
        }

        stage('Build Image') {
            container('buildah') {
                sh """
                    echo "Building image: ${img} from containers/${params.INTERNAL_IMAGE_NAME}/Dockerfile"
                    buildah bud --layers -f containers/${params.INTERNAL_IMAGE_NAME}/Dockerfile -t ${img} containers/${params.INTERNAL_IMAGE_NAME}
                """
            }
        }

        stage('Code Analysis - CxOne') {
            sh "mkdir -p ${WORKSPACE}/scan_image"
            checkmarxASTScanner(
                branchName: '.unknown',
                checkmarxInstallation: 'checkmarx-one-cli-latest',
                credentialsId: 'cxone_scan_creds',
                projectName: "${params.INTERNAL_IMAGE_NAME}",
                serverUrl: 'https://fis.cxone.cloud',
                tenantName: 'fis',
                additionalOptions: "-s ${WORKSPACE}/scan_image --scan-types container-security --container-images ${img} --report-format summaryJSON --threshold containers-critical=1;containers-high=1;containers-medium=1;containers-low=0 --project-groups CxOne_CQ_${params.INTERNAL_IMAGE_NAME}",
                useOwnAdditionalOptions: true,
                useOwnServerCredentials: true
            )
        }

        stage('Push to JFrog Artifactory') {
            container('buildah') {
                withCredentials([usernamePassword(credentialsId: 'svccacct-hydra-cicd', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASS')]) {
                    sh """
                        buildah login -u $ART_USER -p $ART_PASS ${imageRegistry}
                        buildah push ${img} docker://${img}
                    """
                }
            }
        }
    }
}
