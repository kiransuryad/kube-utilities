{{- if .Values.tls.enabled }}
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: {{ .Values.tls.secretName }}
  namespace: {{ .Release.Namespace }}
spec:
  secretName: {{ .Values.tls.secretName }}
  issuerRef:
    name: {{ .Values.tls.issuer }}
    kind: ClusterIssuer
  commonName: {{ .Values.tls.commonName }}
  dnsNames:
    {{- range .Values.tls.dnsNames }}
    - {{ . }}
    {{- end }}
{{- end }}


tls:
  enabled: true
  issuer: cio-ca-issuer
  secretName: keycloak-tls
  commonName: keycloak.test.internal
  dnsNames:
    - keycloak.test.internal



----
#!/bin/bash

echo "Ensuring JFrog imagePullSecret exists..."

# Retrieve secrets from Harness
USERNAME="<+secrets.getValue(\"svc-acct-artifact-secret-username\")>"
PASSWORD="<+secrets.getValue(\"svc-acct-artifact-secret-password\")>"
EMAIL="your@email.com"

# Generate base64-encoded auth string
AUTH_ENCODED=$(echo -n "${USERNAME}:${PASSWORD}" | base64)

# Apply or update the imagePullSecret
cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Secret
metadata:
  name: jfrog-docker-secret
  namespace: tools
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: $(echo -n '{
    "auths": {
      "edas-docker-snapshot-local.docker.fis.dev": {
        "username": "'${USERNAME}'",
        "password": "'${PASSWORD}'",
        "email": "'${EMAIL}'",
        "auth": "'${AUTH_ENCODED}'"
      }
    }
  }' | base64 -w 0)
EOF



----
#!/bin/bash

echo "Ensuring secret 'jfrog-docker-secret' exists or is updated..."

ENCODED_AUTH=$(echo -n "${HARNESS_JFROG_USERNAME}:${HARNESS_JFROG_API_KEY}" | base64)

cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Secret
metadata:
  name: jfrog-docker-secret
  namespace: tools
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: $(echo -n '{
    "auths": {
      "edas-docker-snapshot-local.docker.fis.dev": {
        "username": "'${HARNESS_JFROG_USERNAME}'",
        "password": "'${HARNESS_JFROG_API_KEY}'",
        "email": "your@email.com",
        "auth": "'${ENCODED_AUTH}'"
      }
    }
  }' | base64 -w 0)
EOF



----
Step 1: Update values.yaml in Your Helm Chart
Add this:

imagePullSecrets:
  - name: jfrog-docker-secret
Update your templates/deployment.yaml if it isn’t already:

spec:
  imagePullSecrets:
    {{- toYaml .Values.imagePullSecrets | nindent 6 }}
This ensures Harness will always use the correct pull secret when deploying the chart.

⚙️ Step 2: Add a Shell Script Step in Harness (Before Helm Deploy)
Purpose:

Ensure the secret exists (idempotent), skip if already created.

📄 Script Content:

#!/bin/bash

kubectl get secret jfrog-docker-secret -n tools >/dev/null 2>&1

if [ $? -ne 0 ]; then
  echo "Secret not found. Creating..."
  kubectl create secret docker-registry jfrog-docker-secret \
    --docker-server=edas-docker-snapshot-local.docker.fis.dev \
    --docker-username=${HARNESS_JFROG_USERNAME} \
    --docker-password=${HARNESS_JFROG_API_KEY} \
    --docker-email=your@email.com \
    -n tools
else
  echo "Secret already exists. Skipping creation."
fi



---
Step-by-Step: Patch the Running Deployment
1. Create the image pull secret (if not done yet)

kubectl create secret docker-registry jfrog-docker-secret \
  --docker-server=edas-docker-snapshot-local.docker.fis.dev \
  --docker-username=<your-username> \
  --docker-password=<your-api-key> \
  --docker-email=you@example.com \
  -n tools
2. Patch your deployment to use the secret

kubectl patch deployment tools-pod \
  -n tools \
  --type='json' \
  -p='[{"op":"add","path":"/spec/template/spec/imagePullSecrets","value":[{"name":"jfrog-docker-secret"}]}]'
✅ This adds the imagePullSecrets field to your pod spec, without altering anything else.

3. Restart the deployment

kubectl rollout restart deployment tools-pod -n tools
4. Watch pod startup

kubectl get pods -n tools -w
Once you see the pod go from ContainerCreating to Running, you're good!

✅ Once Tested Successfully
Update your Helm chart’s values.yaml:
imagePullSecrets:
  - name: jfrog-docker-secret
Ensure your deployment.yaml uses:
spec:
  imagePullSecrets:
    {{- toYaml .Values.imagePullSecrets | nindent 6 }}
Push this to Git, and re-deploy using Harness.
