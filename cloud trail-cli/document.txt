Deploy

Our deployment process follows a controlled, repeatable CI/CD workflow using Jenkins for artifact mirroring, Bitbucket for configuration management, and Harness for environment-specific deployments.

üîÅ Deployment Flow
Artifact Mirroring (Jenkins)
Public container images and Helm charts are mirrored into our private JFrog Artifactory.
This ensures we maintain control over versions, availability, and vulnerability scans.
Helm charts are mirrored into structured paths under mirror/<chart-name>/<version>/<chart-name>/.
Configuration Customization (Bitbucket)
Each service has its overlay repository in Bitbucket (hydra-helm-overlays).
Helm values are customized per environment (dev, test, nonprod, prod).
Code reviews and approvals happen here before promotion.
Environment Deployment (Harness Pipelines)
Each environment has a dedicated Harness pipeline that:
Pulls the mirrored chart and image from JFrog.
Injects secrets via Vault Agent where required.
Applies the Helm chart to the target namespace in the EKS cluster.
Verifies success via health checks and hooks.
Promotion between environments is manual or approval-gated.
üéØ Key Characteristics
Feature	Description
Source Repositories	Bitbucket (Helm overlays and values)
Artifact Store	JFrog Artifactory (charts and images)
CI Pipeline	Jenkins (mirroring and preprocessing)
CD Pipeline	Harness (controlled Helm deployments)
Secrets Management	Vault Agent Injector in pods
Promotion Workflow	Manual or approval-based per environment
Auditability	All changes tracked in Bitbucket and Harness








--------------------------------------------
Component	Details
Ingress-NGINX	Namespace: ingress-nginx
Deployment: Helm chart
Type: NodePort with Proxy Protocol
Connected To: Internal NLB (Terraform provisioned)
Ingress Logic: Path-based routing
TLS: Handled by cert-manager using self-signed ClusterIssuer
Purpose: Entry point to Keycloak and other internal apps
Certificate Manager	Namespace: cert-manager
Chart: Jetstack Helm chart
Issuer Type: Self-signed internal ClusterIssuer
Responsibilities: Handles internal TLS cert creation and rotation
CRDs: Installed and managed via Helm
Vault Agent Injector	Namespace: Runs in keycloak-eda but cluster-scoped
Management: Configured via Vault CLI in Harness pipeline
Secret Injection: Injects into pod environment and files
Advantages: TTL support, avoids K8s Secret tampering, supports dynamic secrets
Vault Pathing: Uses secret/data/prod/... convention
Observability Stack	Namespace: kube-prometheus-stack
Chart: kube-prometheus-stack Helm chart
Components:
‚Ä¢ Prometheus (scraping metrics)
‚Ä¢ Grafana (visualization dashboards)
‚Ä¢ Alertmanager (routing alerts to AWS SNS)
‚Ä¢ Node Exporter & Kube State Metrics
‚Ä¢ Loki (logging backend)
‚Ä¢ Promtail (log shipper)
Custom Dashboards: Keycloak, Vault, Infrastructure metrics
Harness Delegate	Namespace: harness-delegate-ng
Deployment: Manual (YAML-based)
Extra Tools: Vault CLI baked or installed at runtime
Role: Executes Helm charts using pipelines, promotes Helm packages from JFrog
Notes: Bootstrapped first for all deployments
Keycloak Deployment	Namespace: keycloak-eda
Chart: codecentric/keycloak (customized)
Secrets: Admin credentials and DB URI via Vault Agent
TLS: Enabled via cert-manager
Ingress Path: /auth
DB Backend: Aurora PostgreSQL (Terraform provisioned)
Modes: StatefulSet with HAProxy if needed
Velero Backup	Namespace: velero
Frequency: Daily
Backup Target: S3 bucket
IAM Role: Attached with restricted access for backups
Restore: Tested on pgAdmin and other debug tools
Scope: PVC snapshots, Kubernetes objects
Kube-Debug Tools	Namespace: kube-debug-tools
Included Tools:
‚Ä¢ nicolaka/netshoot for networking tests (curl, telnet, dig)
‚Ä¢ vault-cli to test token authentication and TTL
‚Ä¢ pgAdmin UI for RDS inspection
‚Ä¢ httpbin to test ingress headers and rewrites
Purpose: Always-on pod(s) for support and diagnostics
Metrics Server	Namespace: metrics-server
Purpose: Enables Horizontal Pod Autoscaling (HPA)
Feeds: Grafana dashboards with live CPU/memory usage
Mode: Lightweight and cluster-wide
Note: Required for HPA to function correctly in the cluster

-----------------------
Runbook Status

CURRENT - REVIEWED 01/08/2025

üîñ Runbook Name

keycloak

keycloak-ethos

üìò Runbook Description

Keycloak is an open-source identity and access management solution. Each instance is deployed inside a private EKS cluster, connecting to an external Aurora PostgreSQL RDS backend. The deployment follows a GitOps-based approach using Terraform, Helm, and Harness pipelines. Secrets are securely managed with Vault Agent Injector, and observability is enabled through kube-prometheus-stack and Loki.

TLS is enabled using cert-manager with a self-signed internal CA. Each deployment is encapsulated within its namespace, and additional tooling such as pgAdmin, netshoot, and metrics-server support diagnostics and scaling.

üë§ Owner

eda-management@fisglobal.com

üìÇ Contents

System Architecture

Namespaces Overview

Service Components

Ingress-NGINX

Certificate Manager

Vault Agent Injector

Observability Stack

Harness Delegate

Keycloak Deployment

Velero Backup

Kube-Debug Tools

Metrics Server

Deployment Order

Access, Backup & Scaling

Enhancements & Future Improvements

üß± System Architecture

All services are deployed into a private EKS cluster

Services are isolated using Kubernetes namespaces

ALB ‚Üí NGINX (NodePort) ‚Üí Services

Internal TLS provided by cert-manager self-signed CA

Secrets injected via Vault Agent

Harness pipelines for Helm chart promotion

Prometheus/Grafana/Loki for observability

üìõ Namespaces Overview

Namespace

Purpose

ingress-nginx

Ingress controller stack

cert-manager

TLS issuance via internal CA

vault

(external, only injector inside K8s)

keycloak-eda

Primary workload

harness-delegate-ng

CI/CD runner from Harness

kube-prometheus-stack

Monitoring, alerting, dashboards

metrics-server

HPA and resource metrics

kube-debug-tools

Netshoot, pgAdmin, Vault CLI

velero

Backup and restore for workloads

üîß Service Components

1. Ingress-NGINX

Namespace: ingress-nginx

Deployed via Helm using NodePort + Proxy Protocol

Connected to internal NLB created via Terraform

Supports path-based routing

TLS handled by cert-manager ClusterIssuer

2. Certificate Manager

Namespace: cert-manager

Helm deployment using Jetstack chart

Creates internal self-signed ClusterIssuer

Handles TLS for ingress-enabled services

3. Vault Agent Injector

Namespace: keycloak-eda (injector installed cluster-wide)

Vault CLI runs in Harness pipeline to configure roles/policies

Secrets injected into pod environment/volumes

Avoids K8s secrets, supports TTL and rotation

4. Observability Stack

Namespace: kube-prometheus-stack

Helm chart: kube-prometheus-stack

Includes:

Prometheus (metrics)

Grafana (dashboards)

Alertmanager (alerts ‚Üí AWS SNS)

Node Exporter, Kube State Metrics

Loki + Promtail deployed for centralized logs

Dashboards and alerts tailored for Keycloak, Vault, etc.

5. Harness Delegate

Namespace: harness-delegate-ng

Deployed manually via YAML

Vault CLI installed in Harness shell steps

Supports Helm deployments via JFrog-based chart promotion

6. Keycloak Deployment

Namespace: keycloak-eda

Helm chart: codecentric/keycloak

Admin creds, DB URL injected via Vault

TLS enabled ingress with /auth path

Connects to Aurora PostgreSQL (Terraform provisioned)

7. Velero Backup

Namespace: velero

Daily backups of persistent volume claims

Backup to S3 bucket with proper IAM roles

Restore tested for pgAdmin and tools pods

8. Kube-Debug Tools

Namespace: kube-debug-tools

Tools:

netshoot (debug pod)

vault-cli (token inspection)

pgAdmin (Postgres DB browsing)

httpbin (ingress header testing)

9. Metrics Server

Namespace: metrics-server

Enables resource metrics for HPA

Required by Grafana dashboards for live resource usage

üì¶ Deployment Order

Step

Component

Notes

1

Harness Delegate

Manual YAML + Harness config

2

ingress-nginx

NodePort with NLB

3

cert-manager

CRDs + Webhooks

4

cert-manager Internal CA

Self-signed ClusterIssuer

5

vault-agent-injector

Vault role/policy setup via CLI

6

kube-prometheus-stack

Grafana, Prometheus, Alertmanager

7

loki-stack

Logging + Promtail agents

8

metrics-server

Cluster metrics + HPA

9

kube-debug-tools

netshoot, pgAdmin, vault-cli, httpbin

10

Keycloak Deployment

Helm + Vault secrets + ingress

11

Velero

Backup configuration

12

Final Validation

Ingress, TLS, Vault, Logs, Dashboards

üîê Access, Backup & Scaling

Keycloak UI exposed via path /auth with TLS

Admin credentials stored in Vault under secret/data/prod/keycloak/admin

pgAdmin available via internal ingress with Vault credentials

Velero handles daily volume backups to S3

HPA supported via metrics-server and resource annotations

üöÄ Enhancements & Future Improvements

Feature

Description

IRSA

Use for Route53/S3 integration per pod

Karpenter

Advanced node autoscaling

ArgoCD

GitOps for infra and app charts

OPA/Gatekeeper

Policy-based workload enforcement

PDBs

Pod disruption resilience

Chaos Testing

Validates availability under failures

Kubecost

Cost visibility per service/namespace

‚úÖ Summary

This setup provides a production-ready, observable, secure, and scalable deployment of Keycloak in EKS using Vault, cert-manager, and Harness. All components are namespace-isolated and designed for ease of maintenance and future extensibility.

Updates should be made in respective Helm values.yaml, Vault policy files, and Harness pipeline definitions.
