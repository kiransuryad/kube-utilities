@Library('framework-shared-libs@v1.0.0') _

// Set up pipeline parameters (similar to "parameters { ... }" in declarative)
properties([
    parameters([
        string(name: 'SOURCE_HELM_REPO_URL',    defaultValue: 'https://codecentric.github.io/helm-charts', description: 'Source Helm repository URL'),
        string(name: 'SOURCE_HELM_REPO_NAME',   defaultValue: 'codecentric',                               description: 'Name of the source Helm repository'),
        string(name: 'SOURCE_HELM_CHART_NAME',  defaultValue: 'keycloakx',                                description: 'Source Helm chart name'),
        string(name: 'SOURCE_HELM_CHART_VERSION', defaultValue: '',                                       description: 'Source Helm chart version (leave empty for latest)')
    ])
])

// Define a podTemplate that references your 'cicd.yaml'
podTemplate(
    yamlFile: 'cicd.yaml', 
    label: "docker-build-${env.BUILD_NUMBER}"
) {
    node("docker-build-${env.BUILD_NUMBER}") {
        // Set environment variables inside the node
        env.ARTIFACTORY_URL   = 'https://your-artifactory.example.com'
        env.ARTIFACTORY_REPO  = 'helm-local'
        env.INTERNAL_VERSION  = '1.0.0-internal'
        // Example of other environment variables you might use
        env.DOCKER_REGISTRY   = "docker-registry.default.svc:5000"
        // etc.

        stage('Checkout') {
            checkout scm
        }

        stage('Pull Helm Chart') {
            // Use the container name from your cicd.yaml that has Helm installed
            container('docker') {
                script {
                    // Add the source Helm repository and update
                    sh "helm repo add ${params.SOURCE_HELM_REPO_NAME} ${params.SOURCE_HELM_REPO_URL}"
                    sh "helm repo update"

                    // Build the helm pull command
                    def pullCmd = "helm pull ${params.SOURCE_HELM_REPO_NAME}/${params.SOURCE_HELM_CHART_NAME} --untar"
                    if (params.SOURCE_HELM_CHART_VERSION?.trim()) {
                        pullCmd += " --version ${params.SOURCE_HELM_CHART_VERSION}"
                    }
                    sh pullCmd
                }
            }
        }

        stage('Update Internal Version') {
            container('docker') {
                script {
                    // Update the version in Chart.yaml to your internal version
                    sh """
                        sed -i 's/^version:.*/version: ${env.INTERNAL_VERSION}/' ${params.SOURCE_HELM_CHART_NAME}/Chart.yaml
                    """
                }
            }
        }

        stage('Package Helm Chart') {
            container('docker') {
                script {
                    // Package the chart into a .tgz file
                    sh "helm package ${params.SOURCE_HELM_CHART_NAME}"
                }
            }
        }

        stage('Upload to Artifactory') {
            container('docker') {
                // Use Jenkins credentials for the Artifactory service account
                withCredentials([
                    usernamePassword(
                        credentialsId: 'jfrog-service-account',
                        usernameVariable: 'ARTIFACTORY_USER',
                        passwordVariable: 'ARTIFACTORY_PASSWORD'
                    )
                ]) {
                    script {
                        // Identify the packaged chart file (assuming only one .tgz)
                        def chartFile = sh(script: "ls *.tgz", returnStdout: true).trim()

                        // Upload via curl with basic auth
                        sh """
                            curl -u ${ARTIFACTORY_USER}:${ARTIFACTORY_PASSWORD} -T ${chartFile} \\
                            "${env.ARTIFACTORY_URL}/artifactory/${env.ARTIFACTORY_REPO}/${chartFile}"
                        """
                    }
                }
            }
        }

        // EXAMPLE: If you have Docker build/push steps, add them as additional stages
        /*
        stage('Build Docker Image') {
            container('docker') {
                sh "docker build -t ${DOCKER_REGISTRY}/myimage:${BUILD_NUMBER} ."
            }
        }

        stage('Push Docker Image') {
            container('docker') {
                sh "docker push ${DOCKER_REGISTRY}/myimage:${BUILD_NUMBER}"
            }
        }
        */
    }
}







---------------
pipeline {
    agent any

    parameters {
        string(name: 'SOURCE_HELM_REPO_URL', defaultValue: 'https://codecentric.github.io/helm-charts', description: 'Source Helm repository URL')
        string(name: 'SOURCE_HELM_REPO_NAME', defaultValue: 'codecentric', description: 'Name of the source Helm repository')
        string(name: 'SOURCE_HELM_CHART_NAME', defaultValue: 'keycloakx', description: 'Source Helm chart name')
        string(name: 'SOURCE_HELM_CHART_VERSION', defaultValue: '', description: 'Source Helm chart version (leave empty for latest)')
    }

    environment {
        // Artifactory configuration (adjust these values for your environment)
        ARTIFACTORY_URL = 'https://your-artifactory.example.com'
        ARTIFACTORY_REPO = 'helm-local'
        // Internal version to be applied to the chart
        INTERNAL_VERSION = '1.0.0-internal'
    }

    stages {
        stage('Pull Helm Chart') {
            steps {
                script {
                    // Add the source Helm repository using parameters
                    sh "helm repo add ${params.SOURCE_HELM_REPO_NAME} ${params.SOURCE_HELM_REPO_URL}"
                    sh "helm repo update"
                    // Construct the helm pull command; include --version if provided
                    def pullCmd = "helm pull ${params.SOURCE_HELM_REPO_NAME}/${params.SOURCE_HELM_CHART_NAME} --untar"
                    if (params.SOURCE_HELM_CHART_VERSION?.trim()) {
                        pullCmd += " --version ${params.SOURCE_HELM_CHART_VERSION}"
                    }
                    sh pullCmd
                }
            }
        }
        stage('Update Internal Version') {
            steps {
                script {
                    // Update the version in Chart.yaml to use the internal version
                    // This example uses GNU sed; adjust for macOS if needed.
                    sh "sed -i 's/^version:.*/version: ${INTERNAL_VERSION}/' ${params.SOURCE_HELM_CHART_NAME}/Chart.yaml"
                }
            }
        }
        stage('Package Helm Chart') {
            steps {
                script {
                    // Package the chart, which will create a .tgz file (e.g., keycloakx-1.0.0-internal.tgz)
                    sh "helm package ${params.SOURCE_HELM_CHART_NAME}"
                }
            }
        }
        stage('Upload to Artifactory') {
            steps {
                // Use the Artifactory service account credentials stored in Jenkins (ID: jfrog-service-account)
                withCredentials([usernamePassword(credentialsId: 'jfrog-service-account', 
                                                  usernameVariable: 'ARTIFACTORY_USER', 
                                                  passwordVariable: 'ARTIFACTORY_PASSWORD')]) {
                    script {
                        // Identify the packaged chart file (assuming only one .tgz file exists)
                        def chartFile = sh(script: "ls *.tgz", returnStdout: true).trim()
                        // Use curl with basic authentication to upload the chart to Artifactory
                        sh """
                            curl -u ${ARTIFACTORY_USER}:${ARTIFACTORY_PASSWORD} -T ${chartFile} \
                                 "${ARTIFACTORY_URL}/artifactory/${ARTIFACTORY_REPO}/${chartFile}"
                        """
                    }
                }
            }
        }
    }
}




-----------------------
pipeline {
  agent { label 'helm-enabled' } // Use a specific agent label with Git, Helm, and curl installed.
  
  parameters {
    string(name: 'ARTIFACTORY_URL', defaultValue: 'https://your-artifactory-domain/artifactory/helm', description: 'Artifactory Helm Repository URL')
    string(name: 'CHART_REPO', defaultValue: 'https://github.com/bitnami/charts.git', description: 'Git repository containing the helm charts')
    string(name: 'CHART_DIR', defaultValue: 'bitnami/keycloak', description: 'Relative path to the Keycloak chart within the repository')
  }
  
  environment {
    // Credentials can be reused across stages.
    ARTIFACTORY_CREDENTIALS = credentials('artifactory-credentials')
  }
  
  stages {
    stage('Test Artifactory Connectivity') {
      steps {
        script {
          // Test connectivity using curl and validate response code.
          sh '''
            RESPONSE=$(curl -u ${ARTIFACTORY_CREDENTIALS_USR}:${ARTIFACTORY_CREDENTIALS_PSW} -s -o /dev/null -w "%{http_code}" ${ARTIFACTORY_URL}/index.yaml)
            if [ "$RESPONSE" -ne 200 ]; then
              echo "Failed to connect to Artifactory. HTTP response code: $RESPONSE"
              exit 1
            fi
          '''
        }
      }
    }
    
    stage('Clone Helm Chart Repository') {
      steps {
        // Clone the repository. Using a shallow clone to speed up the process.
        sh "git clone --depth 1 ${params.CHART_REPO}"
      }
    }
    
    stage('Package Helm Chart') {
      steps {
        dir(params.CHART_DIR) {
          // Package the chart. This creates a .tgz file in the current directory.
          sh "helm package ."
        }
      }
    }
    
    stage('Push Helm Chart to Artifactory') {
      steps {
        script {
          withCredentials([usernamePassword(credentialsId: 'artifactory-credentials', 
                                               usernameVariable: 'ARTIFACTORY_USER', 
                                               passwordVariable: 'ARTIFACTORY_PASSWORD')]) {
            // Find the packaged chart file (assuming only one .tgz exists)
            def chartFile = sh(script: "ls ${params.CHART_DIR}/*.tgz", returnStdout: true).trim()
            echo "Chart package file: ${chartFile}"
            
            // Upload the chart using curl.
            sh """
              curl -u $ARTIFACTORY_USER:$ARTIFACTORY_PASSWORD -T ${chartFile} "${params.ARTIFACTORY_URL}/${chartFile.tokenize('/')[-1]}"
            """
            
            // Archive the chart artifact for traceability.
            archiveArtifacts artifacts: "${params.CHART_DIR}/*.tgz", allowEmptyArchive: false
          }
        }
      }
    }
  }
  
  post {
    success {
      echo 'Helm chart successfully pushed to Artifactory!'
    }
    failure {
      echo 'Pipeline failed. Please check the logs for details.'
    }
    cleanup {
      cleanWs()
    }
  }
}
