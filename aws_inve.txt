
pip install boto3 pandas xlsxwriter

python aws_inventory.py


import boto3
from botocore.config import Config
import pandas as pd
from datetime import datetime
from botocore.exceptions import ClientError
import sys
import urllib3
import ssl

# Disable SSL verification warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Define specific regions to scan
REGIONS_TO_SCAN = ['us-east-1', 'eu-west-1', 'eu-west-2']

def create_client(service, region=None):
    """Create boto3 client with SSL verification disabled"""
    config = Config(
        retries = dict(
            max_attempts = 3
        )
    )
    
    return boto3.client(
        service,
        region_name=region,
        verify=False,  # Disable SSL verification
        config=config
    )

def get_resource_inventory():
    inventory = []
    
    for region in REGIONS_TO_SCAN:
        print(f"Scanning region: {region}")
        
        try:
            # EC2 Instances
            ec2 = create_client('ec2', region)
            paginator = ec2.get_paginator('describe_instances')
            for page in paginator.paginate():
                for reservation in page['Reservations']:
                    for instance in reservation['Instances']:
                        name = ''
                        for tag in instance.get('Tags', []):
                            if tag['Key'] == 'Name':
                                name = tag['Value']
                        inventory.append({
                            'Region': region,
                            'Service': 'EC2',
                            'ResourceId': instance['InstanceId'],
                            'Name': name,
                            'State': instance['State']['Name'],
                            'Type': instance['InstanceType'],
                            'LaunchTime': instance.get('LaunchTime', '').strftime('%Y-%m-%d %H:%M:%S') if instance.get('LaunchTime') else ''
                        })

            # RDS Instances
            rds = create_client('rds', region)
            paginator = rds.get_paginator('describe_db_instances')
            for page in paginator.paginate():
                for db in page['DBInstances']:
                    inventory.append({
                        'Region': region,
                        'Service': 'RDS',
                        'ResourceId': db['DBInstanceIdentifier'],
                        'Name': db['DBInstanceIdentifier'],
                        'State': db['DBInstanceStatus'],
                        'Type': db['DBInstanceClass'],
                        'LaunchTime': db.get('InstanceCreateTime', '').strftime('%Y-%m-%d %H:%M:%S') if db.get('InstanceCreateTime') else ''
                    })

            # S3 Buckets (only needs to be done once as S3 is global)
            if region == 'us-east-1':
                s3 = create_client('s3', region)
                buckets = s3.list_buckets()
                for bucket in buckets['Buckets']:
                    inventory.append({
                        'Region': 'Global',
                        'Service': 'S3',
                        'ResourceId': bucket['Name'],
                        'Name': bucket['Name'],
                        'State': 'Available',
                        'Type': 'Bucket',
                        'LaunchTime': bucket['CreationDate'].strftime('%Y-%m-%d %H:%M:%S')
                    })

            # ELB/ALB/NLB
            elb = create_client('elbv2', region)
            paginator = elb.get_paginator('describe_load_balancers')
            for page in paginator.paginate():
                for lb in page['LoadBalancers']:
                    inventory.append({
                        'Region': region,
                        'Service': 'ELB',
                        'ResourceId': lb['LoadBalancerArn'].split('/')[-1],
                        'Name': lb['LoadBalancerName'],
                        'State': lb['State']['Code'],
                        'Type': lb['Type'],
                        'LaunchTime': lb['CreatedTime'].strftime('%Y-%m-%d %H:%M:%S')
                    })

        except ClientError as e:
            print(f"Error scanning resources in {region}: {e}")
            continue

    return inventory

def save_to_excel(inventory):
    try:
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f'aws_inventory_{timestamp}.xlsx'
        
        # Convert to DataFrame
        df = pd.DataFrame(inventory)
        
        # Create Excel writer object
        with pd.ExcelWriter(filename, engine='xlsxwriter') as writer:
            df.to_excel(writer, index=False, sheet_name='AWS Inventory')
            
            # Get workbook and worksheet objects
            workbook = writer.book
            worksheet = writer.sheets['AWS Inventory']
            
            # Add formats
            header_format = workbook.add_format({
                'bold': True,
                'fg_color': '#D9D9D9',
                'border': 1,
                'align': 'center'
            })
            
            # Format the columns
            for col_num, value in enumerate(df.columns.values):
                worksheet.write(0, col_num, value, header_format)
                column_len = max(df[value].astype(str).apply(len).max(), len(value))
                worksheet.set_column(col_num, col_num, column_len + 2)

        print(f"Inventory successfully saved to {filename}")
        return filename
    
    except Exception as e:
        print(f"Error saving to Excel: {e}")
        return None

def main():
    print("Starting AWS resource inventory...")
    print(f"Scanning regions: {', '.join(REGIONS_TO_SCAN)}")
    
    try:
        # Verify AWS credentials
        sts_client = create_client('sts')
        sts_client.get_caller_identity()
    except ClientError as e:
        print(f"Error: AWS credentials not found or invalid: {e}")
        sys.exit(1)

    inventory = get_resource_inventory()
    
    if not inventory:
        print("No resources found or error occurred while fetching resources.")
        sys.exit(1)
    
    filename = save_to_excel(inventory)
    
    if filename:
        print("\nInventory Summary:")
        print(f"Total resources found: {len(inventory)}")
        
        # Create region and service summary
        df = pd.DataFrame(inventory)
        print("\nResources by region:")
        region_summary = df.groupby('Region').size()
        for region, count in region_summary.items():
            print(f"{region}: {count}")
            
        print("\nResources by service:")
        service_summary = df.groupby('Service').size()
        for service, count in service_summary.items():
            print(f"{service}: {count}")

if __name__ == "__main__":
    main()
