// Unified image map block
Map containerImageMap = [
    imageRegistry: 'edas-docker-snapshot-local.docker.fis.dev',
    imageName: 'test/hydra-tools',
    imageTag: applicationVersion // e.g., "0.0.2"
]
def fullImage = "${containerImageMap.imageRegistry}/${containerImageMap.imageName}:${containerImageMap.imageTag}"



stage('Sysdig Scan') {
    container('buildah') {
        String ociPath = "oci://${containerImageMap.imageName}:${containerImageMap.imageTag}"

        // Optional: Buildah login here if Sysdig needs image pull access
        sh '''
        buildah push ${ociPath} docker://${fullImage}
        '''

        sysdigImageScan(
            bailOnFail: false,
            engineCredentialsId: 'CAAS_GLOBALLY_SHARED_FIS_SYSDIG_TOKEN',
            engineURL: 'https://us2.app.sysdig.com',
            imageName: "${fullImage}",
            inlineScanExtraParams: "--override-pullstring-oci=${ociPath}"
        )
    }
}


stage('Push OCI Artifact to JFrog Artifactory') {
    container('buildah') {
        withCredentials([usernamePassword(credentialsId: 'svcasct-hydra-cicd', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASS')]) {
            sh '''
            echo $ART_PASS | buildah login -u $ART_USER --password-stdin ${containerImageMap.imageRegistry}
            buildah push \
              oci://${containerImageMap.imageName}:${containerImageMap.imageTag} \
              docker://${fullImage}
            '''
        }
    }
}


-----
# Use the latest UBI 9 minimal image
FROM registry.access.redhat.com/ubi9/ubi-minimal:latest

# Set working directory
WORKDIR /tmp

# Install required tools using dnf (recommended over microdnf for security updates)
RUN dnf update -y && \
    dnf install -y \
        tar \
        gzip \
        git \
        curl \
        bash \
        findutils \
    && dnf clean all

# Install Helm (latest stable version)
# Use a pinned checksum for security.
ARG HELM_VERSION=v3.14.3 # Update to the latest stable version
ARG HELM_CHECKSUM="sha256:d842b04c865761a5b83642333066348ef520d2e82548819597143419992f9501" # Update checksum
RUN curl -fsSL -o helm.tar.gz "https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz" && \
    echo "${HELM_CHECKSUM} helm.tar.gz" | sha256sum -c - && \
    tar -zxvf helm.tar.gz && \
    mv linux-amd64/helm /usr/local/bin/helm && \
    chmod +x /usr/local/bin/helm && \
    rm -rf helm.tar.gz linux-amd64

# Install AWS CLI v2 (using the official Red Hat package if available, else latest)
# Always pin versions for production.
ARG AWS_CLI_VERSION=2.15.27 # Update to the latest
RUN dnf install -y aws-cli-${AWS_CLI_VERSION} || \
    (curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && \
    unzip awscliv2.zip && \
    ./aws/install && \
    rm -rf awscliv2.zip aws)

# Install kubectl (latest stable version, pinned version)
ARG KUBECTL_VERSION=v1.29.2 # Update to the latest stable
ARG KUBECTL_CHECKSUM="sha256:4f1a07018318b76c0e5a40735f4749f76a5913253b27670788d7122a61115206" #Update checksum
RUN curl -LO "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl" && \
    echo "${KUBECTL_CHECKSUM} kubectl" | sha256sum -c - && \
    chmod +x kubectl && mv kubectl /usr/local/bin/kubectl

# Add OCI compatibility flag for Helm by default
ENV HELM_EXPERIMENTAL_OCI=1

# Set the UID as 10001 (as per your org's policy)
USER 10001

ENTRYPOINT ["/bin/bash"]



----------
stage('Push OCI Artifact to JFrog Artifactory') {
    container('buildah') {
        withCredentials([usernamePassword(credentialsId: 'your-artifactory-cred-id', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASS')]) {
            sh '''
            echo $ART_PASS | buildah login -u $ART_USER --password-stdin your-jfrog-instance/artifactory/docker-local
            buildah push oci://hydra-tools-test-${containerImageMap.tag} docker://your-jfrog-instance/artifactory/docker-local/hydra-tools-test:${containerImageMap.tag}
            '''
        }
    }
}


-------
FROM registry.access.redhat.com/ubi9/ubi-minimal:9.3-311

# Set working directory
WORKDIR /tmp

# Install required tools
RUN microdnf install -y \
    tar \
    gzip \
    git \
    curl \
    bash \
    findutils \
    && microdnf clean all

# Install Helm (v3.11.2 for OCI compatibility)
RUN curl -sSL -o helm.tar.gz https://get.helm.sh/helm-v3.11.2-linux-amd64.tar.gz && \
    tar -zxvf helm.tar.gz && \
    mv linux-amd64/helm /usr/local/bin/helm && \
    chmod +x /usr/local/bin/helm && \
    rm -rf helm.tar.gz linux-amd64

# Install AWS CLI v2 (optional if needed for artifact upload or other AWS tasks)
RUN curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && \
    unzip awscliv2.zip && \
    ./aws/install && \
    rm -rf awscliv2.zip aws

# Optional: Install kubectl if you later need it in pipeline 2/3
RUN curl -LO "https://dl.k8s.io/release/v1.28.0/bin/linux/amd64/kubectl" && \
    chmod +x kubectl && mv kubectl /usr/local/bin/kubectl

# Add OCI compatibility flag for Helm by default
ENV HELM_EXPERIMENTAL_OCI=1

# Set the UID as 10001 (as per your org's policy)
USER 10001

ENTRYPOINT ["/bin/bash"]



------
Param	Value
SRC_REPO_URL	https://kubernetes.github.io/ingress-nginx
SRC_REPO_NAME (optional)	ingress-nginx
SRC_CHART_NAME	ingress-nginx
SRC_CHART_VERSION	(optional) 4.9.0 or leave blank for latest stable version.
TARGET_BITBUCKET_REPO	hydra-helm-upstreams

----
@Library(['common-lib@3-stable']) _

properties([
    parameters([
        string(name: 'SRC_REPO_URL', defaultValue: 'https://charts.bitnami.com/bitnami', description: 'Public Helm repository URL'),
        string(name: 'SRC_REPO_NAME', defaultValue: 'bitnami', description: 'Public Helm repository name'),
        string(name: 'SRC_CHART_NAME', defaultValue: 'nginx', description: 'Source Helm chart name'),
        string(name: 'SRC_CHART_VERSION', defaultValue: '', description: 'Source Helm chart version (leave empty for latest)'),
        string(name: 'TARGET_BITBUCKET_REPO', defaultValue: 'hydra-helm-upstreams', description: 'Internal Bitbucket repo to push mirrored chart into')
    ])
])

String podTemplate = '''
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: aws
    image: qas-docker-release-local.docker.fis.dev/jenkins/able-minion:helm-aws:3.6.3-1
    command: ["cat"]
    tty: true
'''.stripIndent()

podTemplate(yaml: podTemplate, label: 'hydra-pod') {
    node('hydra-pod') {

stage('Mirror Helm Chart from Public Repo') {
    container('aws') {
        sh '''
        if [[ "${SRC_REPO_URL}" == oci* ]]; then
            echo "Detected OCI Helm registry source"
            
            if [ -z "${SRC_CHART_VERSION}" ]; then
              echo "Error: OCI charts require version parameter."
              exit 1
            fi

            # OCI pull (no DockerHub login required for public Bitnami OCI charts)
            helm pull ${SRC_REPO_URL}/${SRC_CHART_NAME} --version ${SRC_CHART_VERSION}

            # Export the chart from OCI artifact format into traditional Helm chart directory
            helm chart export ${SRC_CHART_NAME}-${SRC_CHART_VERSION}.tgz -d ${SRC_CHART_NAME}

        else
            echo "Detected classic Helm repo"
            helm repo add ${SRC_REPO_NAME} ${SRC_REPO_URL}
            
            if [ -z "${SRC_CHART_VERSION}" ]; then
              helm pull ${SRC_REPO_NAME}/${SRC_CHART_NAME} --untar --untardir ${SRC_CHART_NAME}
            else
              helm pull ${SRC_REPO_NAME}/${SRC_CHART_NAME} --version ${SRC_CHART_VERSION} --untar --untardir ${SRC_CHART_NAME}
            fi
            
            helm repo remove ${SRC_REPO_NAME}
        fi
        '''
    }
}


        stage('Helm Lint Check') {
            container('aws') {
                sh '''
                helm lint ${SRC_CHART_NAME}/${SRC_CHART_NAME} || { echo "Helm lint failed!"; exit 1; }
                '''
            }
        }

        stage('Push Helm Chart to Bitbucket (HTTPS + Your Credentials)') {
            withCredentials([usernamePassword(credentialsId: 'kiran-creds', usernameVariable: 'BB_USER', passwordVariable: 'BB_TOKEN')]) {
                container('aws') {
                    sh '''
                    git config --global user.name "${BB_USER}"
                    git config --global user.email "${BB_USER}@yourorg.com"
                    git clone https://${BB_USER}:${BB_TOKEN}@bitbucket.org/your-org/${TARGET_BITBUCKET_REPO}.git

                    cd ${TARGET_BITBUCKET_REPO}
                    git checkout -b mirror_${SRC_CHART_NAME}_${SRC_CHART_VERSION:-latest} || git checkout mirror_${SRC_CHART_NAME}_${SRC_CHART_VERSION:-latest}
                    mkdir -p ${SRC_CHART_NAME}
                    cp -R ../${SRC_CHART_NAME}/${SRC_CHART_NAME}/* ${SRC_CHART_NAME}/

                    git add ${SRC_CHART_NAME}/
                    git commit -m "Mirror: ${SRC_CHART_NAME} ${SRC_CHART_VERSION:-latest} from ${SRC_REPO_URL}"
                    git push https://${BB_USER}:${BB_TOKEN}@bitbucket.org/your-org/${TARGET_BITBUCKET_REPO}.git HEAD
                    '''
                }
            }
        }
    }
}




--------------
pipeline {
    agent any

    parameters {
        string(name: 'SRC_REPO_URL', defaultValue: 'https://charts.bitnami.com/bitnami', description: 'Public Helm repository URL')
        string(name: 'SRC_CHART_NAME', defaultValue: 'nginx', description: 'Chart name to mirror')
        string(name: 'SRC_CHART_VERSION', defaultValue: '', description: 'Chart version (leave empty for latest)')
    }

    environment {
        GIT_REPO = 'git@bitbucket.org:your-org/hydra-helm-upstreams.git'
        LOCAL_DIR = 'mirror'
    }

    stages {
        stage('Prepare workspace') {
            steps {
                sh 'rm -rf ${LOCAL_DIR} && mkdir ${LOCAL_DIR}'
            }
        }

        stage('Pull Helm chart from public repo') {
            steps {
                sh '''
                helm repo add upstream ${SRC_REPO_URL}
                if [ -z "${SRC_CHART_VERSION}" ]; then
                  helm pull upstream/${SRC_CHART_NAME} --untar --untardir ${LOCAL_DIR}
                else
                  helm pull upstream/${SRC_CHART_NAME} --version ${SRC_CHART_VERSION} --untar --untardir ${LOCAL_DIR}
                fi
                helm repo remove upstream
                '''
            }
        }

        stage('Push to hydra-helm-upstreams repo') {
            steps {
                dir("${LOCAL_DIR}") {
                    sh '''
                    git init
                    git remote add origin ${GIT_REPO}
                    git checkout -b main || git checkout main
                    mkdir -p ${SRC_CHART_NAME}
                    mv ${SRC_CHART_NAME}/* ${SRC_CHART_NAME}/
                    git add ${SRC_CHART_NAME}/
                    git config user.name "ci-bot"
                    git config user.email "ci-bot@yourorg.com"
                    git commit -m "Mirrored ${SRC_CHART_NAME} chart from ${SRC_REPO_URL} ${SRC_CHART_VERSION}"
                    git push origin main
                    '''
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
