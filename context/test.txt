stage('Upload to Artifactory') {
    container('aws') {
        withCredentials([usernamePassword(credentialsId: 'svaccct-hydra-cicd', usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_PASSWORD')]) {
            sh '''
                cd ${WORKSPACE}/packaged
                chartFile=$(ls *.tgz)
                echo "Uploading Helm chart: ${chartFile}"
                
                curl -v -X PUT -H "Content-Type: application/gzip" \
                -u ${ARTIFACTORY_USER}:${ARTIFACTORY_PASSWORD} \
                -T ${chartFile} \
                "${ARTIFACTORY_URL}/${ARTIFACTORY_REPO}/${chartFile}"
            '''
        }
    }
}


stage('Prepare Helm Package') {
    container('aws') {
        dir("${CHART_NAME}/chart") {
            sh '''
                helm dependency update .
                helm lint --strict=false || echo "non blocking lint warning"
                mkdir -p ${WORKSPACE}/packaged
                helm package . -d ${WORKSPACE}/packaged
            '''
        }
    }
}




-----
@Library(['common-lib@3-stable'])

properties([
    parameters([
        string(name: 'OVERLAY_REPO_URL', description: 'Bitbucket repo URL for overlays', defaultValue: 'https://bitbucket.fis.dev/scm/<<org>>/hydra-helm-overlays.git'),
        string(name: 'OVERLAY_REPO_BRANCH', description: 'Feature or develop branch to pull overlay from'),
        string(name: 'CHART_NAME', description: 'Name of the Helm chart to package'),
        string(name: 'INTERNAL_VERSION', description: 'Internal semver version (e.g., 1.0.0) for JFrog'),
    ])
])

// Pod Template Block
String podTemplateString = '''apiVersion: v1
kind: Pod
spec:
  containers:
  - name: aws
    image: caas-docker-release-local.docker.fis.dev/jenkins/able-minimal-helm-aws:6.8.3-r1
    imagePullPolicy: IfNotPresent
    command: ["cat"]
    tty: true
    resources:
      limits:
        cpu: "1"
        memory: "256Mi"
  imagePullSecrets:
  - name: caas-docker-release-local-ro
  - name: caas-docker-snapshot-svccact-hydra-cicd
  restartPolicy: Never
'''

def label = "helm-artifactory-${UUID.randomUUID().toString()}"

podTemplate(
    label: label,
    yaml: podTemplateString,
    serviceAccount: 'jenkins',
    runAsUser: '1000'
) {
    node(label) {
        environment {
            ARTIFACTORY_URL = 'https://artifactory.fis.dev'
            ARTIFACTORY_REPO = 'edas-helm-snapshot-local'
        }

        stage('Checkout Overlays Repo') {
            checkout([$class: 'GitSCM',
                branches: [[name: "${params.OVERLAY_REPO_BRANCH}"]],
                userRemoteConfigs: [[url: "${params.OVERLAY_REPO_URL}", credentialsId: 'kiran-creds']]
            ])
        }

        stage('Prepare Helm Package') {
            container('aws') {
                dir("${params.CHART_NAME}") {
                    sh '''
                    helm dependency update .
                    helm lint .
                    helm package . -d ../packaged
                    '''
                }
            }
        }

        stage('Upload to Artifactory') {
            container('aws') {
                withCredentials([usernamePassword(credentialsId: 'svccact-hydra-cicd', usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_PASSWORD')]) {
                    dir('packaged') {
                        def chartFile = sh(script: "ls *.tgz", returnStdout: true).trim()
                        sh '''
                        curl -v -u ${ARTIFACTORY_USER}:${ARTIFACTORY_PASSWORD} -T ${chartFile} \
                        -H "Content-Type: application/gzip" \
                        ${ARTIFACTORY_URL}/artifactory/${ARTIFACTORY_REPO}/${params.CHART_NAME}-${params.INTERNAL_VERSION}.tgz
                        '''
                    }
                }
            }
        }

        post {
            always {
                cleanWs()
            }
        }
    }
}



---------------
@Library(['common-lib@3-stable']) _

pipeline {
    agent none

    parameters {
        string(name: 'CHART_NAME', description: 'Helm chart name (e.g., nginx, keycloak)')
        string(name: 'CHART_VERSION', description: 'Helm chart version (e.g., 1.21.0)')
        string(name: 'OVERLAY_FEATURE_BRANCH', description: 'Feature branch name to create/push in hydra-helm-overlays')
    }

    environment {
        UPSTREAM_GIT_URL = 'https://bitbucket.org/your-org/hydra-helm-upstreams.git'
        OVERLAYS_GIT_URL = 'https://bitbucket.org/your-org/hydra-helm-overlays.git'
        OVERLAYS_MAIN_BRANCH = 'develop'
    }

    stages {
        stage('Clone Repositories using HTTPS') {
            agent { label 'aws' }

            environment {
                GIT_SSL_NO_VERIFY = 'true'
            }

            steps {
                withCredentials([usernamePassword(credentialsId: 'kiran-creds', usernameVariable: 'BB_USER', passwordVariable: 'BB_TOKEN')]) {
                    sh '''
                    rm -rf upstream overlays

                    echo "Cloning upstream (read-only) repo..."
                    git clone --branch main https://${BB_USER}:${BB_TOKEN}@bitbucket.org/your-org/hydra-helm-upstreams.git upstream

                    echo "Cloning overlays repo..."
                    git clone https://${BB_USER}:${BB_TOKEN}@bitbucket.org/your-org/hydra-helm-overlays.git overlays
                    '''
                }
            }
        }

        stage('Create/Checkout Overlay Feature Branch') {
            agent { label 'aws' }
            steps {
                dir('overlays') {
                    withCredentials([usernamePassword(credentialsId: 'kiran-creds', usernameVariable: 'BB_USER', passwordVariable: 'BB_TOKEN')]) {
                        sh '''
                        git checkout ${OVERLAYS_MAIN_BRANCH} || git checkout -b ${OVERLAYS_MAIN_BRANCH}
                        git checkout -b ${OVERLAY_FEATURE_BRANCH} || git checkout ${OVERLAY_FEATURE_BRANCH}
                        '''
                    }
                }
            }
        }

        stage('Sync Chart Folder from Upstream Repo') {
            agent { label 'aws' }
            steps {
                sh '''
                rm -rf overlays/${CHART_NAME}/chart
                mkdir -p overlays/${CHART_NAME}/chart
                cp -R upstream/${CHART_NAME}/* overlays/${CHART_NAME}/chart/
                '''
            }
        }

        stage('Commit & Push to Overlay Feature Branch') {
            agent { label 'aws' }
            steps {
                dir('overlays') {
                    withCredentials([usernamePassword(credentialsId: 'kiran-creds', usernameVariable: 'BB_USER', passwordVariable: 'BB_TOKEN')]) {
                        sh '''
                        git config user.name "${BB_USER}"
                        git config user.email "${BB_USER}@yourorg.com"

                        git add ${CHART_NAME}/chart || true
                        git commit -m "Overlay Sync: ${CHART_NAME} ${CHART_VERSION} from upstream main"
                        git push https://${BB_USER}:${BB_TOKEN}@bitbucket.org/your-org/hydra-helm-overlays.git HEAD:${OVERLAY_FEATURE_BRANCH}
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}





----------
Purpose: A readonly repo where Jenkins mirrors public Helm charts (e.g., ingress-nginx, cert-manager, keycloak).
Status: âœ… Created and integrated.
hydra-helm-overlays (Bitbucket repo)
Purpose: Customization repo where overlays (custom values.yaml, templates) live, based on upstream charts.
