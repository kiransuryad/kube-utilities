Hi Manuel,

I wanted to update you regarding the onboarding of our project into Checkmarx.

Currently, with our EDA setup, we mirror Keycloak and related Helm charts into our local environment, and as part of this process, we use Checkov for static file scanning. Additionally, we fetch the base Keycloak image from Quay.io, build our own custom-tagged image, and use that downstream.

In the new setup, since we are leveraging the CAAS pipelines for CI, they natively support CheckmarxOne and Sysdig out of the box. At present, we are using Sysdig for container scanning while continuing to mirror Keycloak into our local JFrog repository.

However, Sysdig does not provide strong capabilities for Helm chart scanning, which is why I am looking to utilize CheckmarxOne for this purpose. Moreover, CheckmarxOne also offers container scanning functionality, so we could potentially replace Sysdig entirely with CheckmarxOne.

I understand your earlier point that since Keycloak is a vendor-provided application, these scans might not be strictly necessary. However, as we are mirroring these assets into our local environment and intend to use them internally, we have been performing these scans prior to copying them over.

Please do let me know if you believe these additional scanning steps are not essential. If so, we can simplify the process by removing them.

Thank you,



-------------
Subject: Guidance on GitHub Access for Hydra Team

Hi Kailash,

I hope you're doing well.

This is Kiran from the Hydra team. We received an email yesterday stating that our access to GitHub.worldpay.com will be removed soon.

Below are the three teams we are part of, and we need continued access to the repositories within these teams for our work. Could you please advise on the next steps? Specifically, weâ€™d like to understand:

Have these repositories already been migrated, and can we access them from the FIS space?
If not, can we request to continue using them as they are?
Or do we need to raise a request for migration from our end?
Your guidance on this would be greatly appreciated.

Looking forward to your response.

Best regards,
Kiran




----
----

# Fetch kubeconfig from Harness File Store and write it to a file
                echo "<+fileStore.getAsString('path/to/kubeconfig')>" > /tmp/kubeconfig

                # Ensure correct permissions
                chmod 600 /tmp/kubeconfig

                # Export kubeconfig and list nodes
                export KUBECONFIG=/tmp/kubeconfig
                kubectl get nodes

----
pipeline:
  name: List EKS Nodes and Pods
  identifier: List_EKS_Nodes_and_Pods
  projectIdentifier: your_project_id
  orgIdentifier: your_org_id
  tags: {}
  stages:
    - stage:
        name: List Nodes and Pods
        identifier: List_Nodes_and_Pods
        description: ""
        type: Deployment
        spec:
          serviceConfig:
            serviceRef: your_service_id  # Add a valid service reference here
            serviceDefinition:
              type: Kubernetes
              spec:
                variables: []
          infrastructure:
            environmentRef: your_environment_id
            infrastructureDefinition:
              type: KubernetesDirect
              spec:
                connectorRef: your_eks_connector_id  # Reference to your EKS Kubernetes Cluster Connector
                namespace: default
                releaseName: release
            allowSimultaneousDeployments: false
          execution:
            steps:
              - step:
                  type: ShellScript
                  name: List Nodes
                  identifier: List_Nodes
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |
                          # Use the kubeconfig file from the Harness File Store
                          export KUBECONFIG=/tmp/kubeconfig
                          cp <+fileStore.get("/kubeconfig")> $KUBECONFIG

                          # List nodes in the EKS cluster
                          kubectl get nodes
                    environmentVariables: []
                    outputVariables: []
                  timeout: 10m
              - step:
                  type: ShellScript
                  name: List Pods
                  identifier: List_Pods
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |
                          # Use the kubeconfig file from the Harness File Store
                          export KUBECONFIG=/tmp/kubeconfig
                          cp <+fileStore.get("/kubeconfig")> $KUBECONFIG

                          # List pods in the EKS cluster
                          kubectl get pods --all-namespaces
                    environmentVariables: []
                    outputVariables: []
                  timeout: 10m
            rollbackSteps: []
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback


-----
pipeline:
  name: List EKS Nodes and Pods
  identifier: List_EKS_Nodes_and_Pods
  projectIdentifier: your_project_id
  orgIdentifier: your_org_id
  tags: {}
  stages:
    - stage:
        name: List Nodes and Pods
        identifier: List_Nodes_and_Pods
        description: ""
        type: Deployment
        spec:
          serviceConfig:
            serviceRef: your_service_id  # Add a valid service reference here
            serviceDefinition:
              type: Kubernetes
              spec:
                variables: []
          infrastructure:
            environmentRef: your_environment_id
            infrastructureDefinition:
              type: KubernetesDirect
              spec:
                connectorRef: your_eks_connector_id  # Reference to your EKS Kubernetes Cluster Connector
                namespace: default
                releaseName: release
            allowSimultaneousDeployments: false
          execution:
            steps:
              - step:
                  type: ShellScript
                  name: List Nodes
                  identifier: List_Nodes
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |
                          # List nodes in the EKS cluster
                          kubectl get nodes
                    environmentVariables: []
                    outputVariables: []
                  timeout: 10m
              - step:
                  type: ShellScript
                  name: List Pods
                  identifier: List_Pods
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |
                          # List pods in the EKS cluster
                          kubectl get pods --all-namespaces
                    environmentVariables: []
                    outputVariables: []
                  timeout: 10m
            rollbackSteps: []
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback



-------
pipeline:
  name: List EKS Nodes and Pods
  identifier: List_EKS_Nodes_and_Pods
  projectIdentifier: your_project_id
  orgIdentifier: your_org_id
  tags: {}
  stages:
    - stage:
        name: List Nodes and Pods
        identifier: List_Nodes_and_Pods
        description: ""
        type: Deployment
        spec:
          serviceConfig:
            serviceRef: ""
            serviceDefinition:
              type: Kubernetes
              spec:
                variables: []
          infrastructure:
            environmentRef: your_environment_id
            infrastructureDefinition:
              type: KubernetesDirect
              spec:
                connectorRef: your_eks_connector_id  # Reference to your EKS Kubernetes Cluster Connector
                namespace: default
                releaseName: release
            allowSimultaneousDeployments: false
          execution:
            steps:
              - step:
                  type: ShellScript
                  name: List Nodes
                  identifier: List_Nodes
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |
                          # List nodes in the EKS cluster
                          kubectl get nodes
                    environmentVariables: []
                    outputVariables: []
                  timeout: 10m
              - step:
                  type: ShellScript
                  name: List Pods
                  identifier: List_Pods
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |
                          # List pods in the EKS cluster
                          kubectl get pods --all-namespaces
                    environmentVariables: []
                    outputVariables: []
                  timeout: 10m
            rollbackSteps: []
        tags: {}
        failureStrategies: []
  identifier: "List_EKS_Nodes_and_Pods"
  properties:
    ci:
      codebase:
        connectorRef: ""
        build: <+input>
