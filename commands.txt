s3 delete 
aws s3api delete-objects --bucket BUCKET_NAME --delete "$(aws s3api list-object-versions --bucket BUCKET_NAME --output=json --query='{Objects: Versions[].{Key:Key,VersionId:VersionId}}')"


s3 delete  force
aws s3 rb s3://your-bucket-name --force

aws s3api list-object-versions --bucket BUCKET_NAME --output json --query '{"Objects": Versions[].{Key: Key, VersionId: VersionId}}' > delete.json
aws s3api delete-objects --bucket BUCKET_NAME --delete file://delete.json


aws s3api list-object-versions --bucket your-bucket-name --output json --query '{"Objects": Versions[].{Key: Key, VersionId: VersionId}}' | \
jq -c '.Objects[]' | \
while read -r object; do
    echo "{\"Objects\": [$object]}" > delete_batch.json
    aws s3api delete-objects --bucket your-bucket-name --delete file://delete_batch.json
done

# After deleting all objects and versions, remove the bucket
aws s3 rb s3://your-bucket-name --force


#!/bin/bash

# Function to delete all objects, versions, and the bucket itself
delete_bucket() {
    # List all object versions in the bucket
    versions=$(aws s3api list-object-versions --bucket "$1" --output json)

    # Extract object keys and version IDs
    keys=$(echo "$versions" | jq -r '.Versions[] | {Key: .Key, VersionId: .VersionId} | tostring')

    # Loop through each object and delete it
    while IFS= read -r key; do
        aws s3api delete-object --bucket "$1" --key "$key"
    done < <(echo "$keys")

    # Loop through each delete marker and delete it
    delete_markers=$(echo "$versions" | jq -r '.DeleteMarkers[] | {Key: .Key, VersionId: .VersionId} | tostring')
    while IFS= read -r delete_marker; do
        aws s3api delete-object --bucket "$1" --key "$delete_marker"
    done < <(echo "$delete_markers")

    # Check if there are more versions to delete and recursively call delete_bucket if needed
    next_key_marker=$(echo "$versions" | jq -r '.NextKeyMarker // empty')
    next_version_marker=$(echo "$versions" | jq -r '.NextVersionIdMarker // empty')
    if [ -n "$next_key_marker" ] && [ -n "$next_version_marker" ]; then
        delete_bucket "$1"
    else
        # Delete the bucket itself once all objects and versions are deleted
        aws s3 rb "s3://$1" --force
    fi
}

# Check if bucket name is provided as argument
if [ $# -eq 0 ]; then
    echo "Usage: $0 <bucket-name>"
    exit 1
fi

# Call delete_bucket function with the provided bucket name
delete_bucket "$1"



#!/bin/bash

# Function to delete all objects, versions, and the bucket itself
delete_bucket() {
    # List all object versions in the bucket
    versions=$(aws s3api list-object-versions --bucket "$1" --output json)

    # Extract object keys and version IDs
    keys=$(echo "$versions" | jq -r '.Versions[] | {Key: .Key, VersionId: .VersionId} | tostring')

    # Loop through each object and delete it
    while IFS= read -r key; do
        aws s3api delete-object --bucket "$1" --key "$key"
    done < <(echo "$keys")

    # Loop through each delete marker and delete it
    delete_markers=$(echo "$versions" | jq -r '.DeleteMarkers[] | {Key: .Key, VersionId: .VersionId} | tostring')
    while IFS= read -r delete_marker; do
        aws s3api delete-object --bucket "$1" --key "$delete_marker"
    done < <(echo "$delete_markers")

    # Check if there are more versions to delete and recursively call delete_bucket if needed
    next_key_marker=$(echo "$versions" | jq -r '.NextKeyMarker // empty')
    next_version_marker=$(echo "$versions" | jq -r '.NextVersionIdMarker // empty')
    if [ -n "$next_key_marker" ] && [ -n "$next_version_marker" ]; then
        delete_bucket "$1"
    else
        # Delete the bucket itself once all objects and versions are deleted
        aws s3 rb "s3://$1" --force
    fi
}

# Check if bucket name is provided as argument
if [ $# -eq 0 ]; then
    echo "Usage: $0 <bucket-name>"
    exit 1
fi

# Call delete_bucket function with the provided bucket name
delete_bucket "$1"


#!/bin/bash

# Function to delete all objects, versions, and the bucket itself
delete_bucket() {
    # List all object versions in the bucket
    versions=$(aws s3api list-object-versions --bucket "$1" --output json)

    # Loop through each object version and delete it
    while IFS= read -r object; do
        key=$(jq -r '.Key' <<< "$object")
        versionId=$(jq -r '.VersionId' <<< "$object")
        aws s3api delete-object --bucket "$1" --key "$key" --version-id "$versionId"
    done < <(jq -c '.Versions[]' <<< "$versions")

    # Loop through each delete marker and delete it
    while IFS= read -r delete_marker; do
        key=$(jq -r '.Key' <<< "$delete_marker")
        versionId=$(jq -r '.VersionId' <<< "$delete_marker")
        aws s3api delete-object --bucket "$1" --key "$key" --version-id "$versionId"
    done < <(jq -c '.DeleteMarkers[]' <<< "$versions")

    # Check if there are more versions to delete and recursively call delete_bucket if needed
    next_key_marker=$(jq -r '.NextKeyMarker // empty' <<< "$versions")
    next_version_marker=$(jq -r '.NextVersionIdMarker // empty' <<< "$versions")
    if [ -n "$next_key_marker" ] && [ -n "$next_version_marker" ]; then
        delete_bucket "$1"
    else
        # Delete the bucket itself once all objects and versions are deleted
        aws s3 rb "s3://$1" --force
    fi
}

# Check if bucket name is provided as argument
if [ $# -eq 0 ]; then
    echo "Usage: $0 <bucket-name>"
    exit 1
fi

# Call delete_bucket function with the provided bucket name
delete_bucket "$1"


#!/bin/bash

# Function to delete all objects, versions, and the bucket itself
delete_bucket() {
    # List all object versions in the bucket
    versions=$(aws s3api list-object-versions --bucket "$1" --output json)

    # Extract object keys and version IDs using jq with streaming parser
    keys_and_version_ids=$(jq --stream -c '
        select(length == 2 and .[0][-1] == "Key") as $kv |
        select(length == 2 and .[0][-1] == "VersionId") as $vid |
        if $kv then {key: .[1]} elif $vid then {versionId: .[1]} else empty end
    ' <<< "$versions")

    # Loop through each key and version ID and delete object or delete marker
    while read -r line; do
        key=$(jq -r '.key' <<< "$line")
        versionId=$(jq -r '.versionId' <<< "$line")
        if [ -n "$key" ] && [ -n "$versionId" ]; then
            aws s3api delete-object --bucket "$1" --key "$key" --version-id "$versionId"
        fi
    done <<< "$keys_and_version_ids"

    # Delete the bucket itself once all objects and versions are deleted
    aws s3 rb "s3://$1" --force
}

# Check if bucket name is provided as argument
if [ $# -eq 0 ]; then
    echo "Usage: $0 <bucket-name>"
    exit 1
fi

# Call delete_bucket function with the provided bucket name
delete_bucket "$1"



aws s3api delete-objects --bucket ${BUCKET_NAME} --delete $(aws s3api list-object-versions --bucket ${METAPLAY_AWS_S3_SERVER_BUCKET} --query='{Objects: Versions[].{Key:Key,VersionId:VersionId}}' | jq -c '{Objects: .Objects, Quiet: false}')


aws s3api delete-objects --bucket ${BUCKET_NAME} --delete $(aws s3api list-object-versions --bucket ${METAPLAY_AWS_S3_SERVER_BUCKET} | jq -c '{Objects: [.DeleteMarkers[] | {Key:.Key,VersionId:.VersionId}], Quiet: false}')





#!/bin/bash

# Function to delete all objects and versions from a specified S3 bucket
delete_all_versions() {
    # List all versions and delete markers
    aws s3api list-object-versions --bucket "$1" --output json | jq -c '.Versions[], .DeleteMarkers[]' | while read -r obj; do
        key=$(echo "$obj" | jq -r .Key)
        versionId=$(echo "$obj" | jq -r .VersionId)
        aws s3api delete-object --bucket "$1" --key "$key" --version-id "$versionId"
        if [ $? -ne 0 ]; then
            echo "Failed to delete object $key with version $versionId"
            return 1
        fi
    done
}

# Function to delete the bucket
delete_bucket() {
    echo "Deleting bucket: $1"
    aws s3 rb "s3://$1" --force
}

# Main function to control flow
main() {
    if [ $# -eq 0 ]; then
        echo "Usage: $0 <bucket-name>"
        exit 1
    fi

    echo "Starting deletion of all objects and versions from bucket: $1"
    if delete_all_versions "$1"; then
        delete_bucket "$1"
    else
        echo "Error deleting some objects in bucket: $1"
        exit 1
    fi
}

# Start the process
main "$@"



#!/bin/bash

# Function to delete all objects and versions from a specified S3 bucket
delete_all_versions() {
    # List all versions and delete markers
    aws s3api list-object-versions --bucket "$1" --output json | jq -c '.Versions[], .DeleteMarkers[]' | while read -r obj; do
        key=$(echo "$obj" | jq -r .Key)
        versionId=$(echo "$obj" | jq -r .VersionId)
        aws s3api delete-object --bucket "$1" --key "$key" --version-id "$versionId" >> "$1.log" 2>&1
        # Redirect stdout (1) and stderr (2) to the bucket log file
        if [ $? -ne 0 ]; then
            echo "Failed to delete object $key with version $versionId" >> "$1.log" 2>&1
            return 1
        fi
    done
}

# Function to delete the bucket
delete_bucket() {
    echo "Deleting bucket: $1" >> "$1.log"
    aws s3 rb "s3://$1" --force >> "$1.log" 2>&1
    # Redirect stdout (1) and stderr (2) to the bucket log file
}

# Main function to control flow
main() {
    if [ $# -eq 0 ]; then
        echo "Usage: $0 <bucket-name>" >&2
        exit 1
    fi

    echo "Starting deletion of all objects and versions from bucket: $1"
    if delete_all_versions "$1"; then
        delete_bucket "$1"
    else
        echo "Error deleting some objects in bucket: $1" >&2
        exit 1
    fi
}

# Start the process
main "$@"



#!/bin/bash

# Function to delete all objects and versions from a specified S3 bucket
delete_all_versions() {
    # List all versions and delete markers
    aws s3api list-object-versions --bucket "$1" --output json | jq -c '.Versions[], .DeleteMarkers[]' | \
    while read -r obj; do
        key=$(echo "$obj" | jq -r .Key)
        versionId=$(echo "$obj" | jq -r .VersionId)
        echo "Deleting object $key with version $versionId" >> "$1.log"
        aws s3api delete-object --bucket "$1" --key "$key" --version-id "$versionId" >> "$1.log" 2>&1 &
    done
    wait  # Wait for all delete-object commands to finish
}

# Function to delete the bucket
delete_bucket() {
    echo "Deleting bucket: $1" >> "$1.log"
    aws s3 rb "s3://$1" --force >> "$1.log" 2>&1
}

# Main function to control flow
main() {
    if [ $# -eq 0 ]; then
        echo "Usage: $0 <bucket-name>" >&2
        exit 1
    fi

    echo "Starting deletion of all objects and versions from bucket: $1"
    delete_all_versions "$1"
    delete_bucket "$1"
}

# Start the process
main "$@"

